
BeepSinger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cc4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ebc  08002dd0  08002dd0  00003dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c8c  08004c8c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c8c  08004c8c  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c8c  08004c8c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c8c  08004c8c  00005c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c90  08004c90  00005c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004c94  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001354  2000000c  08004ca0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001360  08004ca0  00006360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c30  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001978  00000000  00000000  0000ec65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  000105e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e5  00000000  00000000  00011018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016904  00000000  00000000  000117fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1ef  00000000  00000000  00028101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084803  00000000  00000000  000332f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7af3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a28  00000000  00000000  000b7b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ba560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002db8 	.word	0x08002db8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002db8 	.word	0x08002db8

0800014c <GPIO_SetBits>:
#include "EPD.h"
#include "EPDfont.h"
#include "stm32f1xx_hal.h"

void GPIO_SetBits(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000158:	887b      	ldrh	r3, [r7, #2]
 800015a:	2201      	movs	r2, #1
 800015c:	4619      	mov	r1, r3
 800015e:	6878      	ldr	r0, [r7, #4]
 8000160:	f001 fb73 	bl	800184a <HAL_GPIO_WritePin>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}

0800016c <GPIO_ResetBits>:

void GPIO_ResetBits(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
 8000174:	460b      	mov	r3, r1
 8000176:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000178:	887b      	ldrh	r3, [r7, #2]
 800017a:	2200      	movs	r2, #0
 800017c:	4619      	mov	r1, r3
 800017e:	6878      	ldr	r0, [r7, #4]
 8000180:	f001 fb63 	bl	800184a <HAL_GPIO_WritePin>
}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <EPD_GPIOInit>:

// 初始化GPIO
void EPD_GPIOInit(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b084      	sub	sp, #16
 8000190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

//  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);

  GPIO_InitStructure.Pin = EPD_CS_Pin | EPD_DC_Pin | EPD_RES_Pin | EPD_SDA_Pin | EPD_SCL_Pin;
 8000192:	233e      	movs	r3, #62	@ 0x3e
 8000194:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000196:	2301      	movs	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800019a:	2303      	movs	r3, #3
 800019c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800019e:	463b      	mov	r3, r7
 80001a0:	4619      	mov	r1, r3
 80001a2:	480a      	ldr	r0, [pc, #40]	@ (80001cc <EPD_GPIOInit+0x40>)
 80001a4:	f001 f9b6 	bl	8001514 <HAL_GPIO_Init>
  GPIO_SetBits(GPIOA, EPD_CS_Pin | EPD_DC_Pin | EPD_RES_Pin | EPD_SDA_Pin | EPD_SCL_Pin);
 80001a8:	213e      	movs	r1, #62	@ 0x3e
 80001aa:	4808      	ldr	r0, [pc, #32]	@ (80001cc <EPD_GPIOInit+0x40>)
 80001ac:	f7ff ffce 	bl	800014c <GPIO_SetBits>

  GPIO_InitStructure.Pin = EPD_BUSY_Pin;
 80001b0:	2340      	movs	r3, #64	@ 0x40
 80001b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80001b4:	2300      	movs	r3, #0
 80001b6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80001b8:	463b      	mov	r3, r7
 80001ba:	4619      	mov	r1, r3
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <EPD_GPIOInit+0x40>)
 80001be:	f001 f9a9 	bl	8001514 <HAL_GPIO_Init>
}
 80001c2:	bf00      	nop
 80001c4:	3710      	adds	r7, #16
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010800 	.word	0x40010800

080001d0 <EPD_WR_Bus>:

// 模拟SPI时序
void EPD_WR_Bus(uint8_t dat)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  EPD_CS_Clr();
 80001da:	2120      	movs	r1, #32
 80001dc:	4815      	ldr	r0, [pc, #84]	@ (8000234 <EPD_WR_Bus+0x64>)
 80001de:	f7ff ffc5 	bl	800016c <GPIO_ResetBits>
  for (i = 0; i < 8; i++)
 80001e2:	2300      	movs	r3, #0
 80001e4:	73fb      	strb	r3, [r7, #15]
 80001e6:	e01a      	b.n	800021e <EPD_WR_Bus+0x4e>
  {
    EPD_SCL_Clr();
 80001e8:	2102      	movs	r1, #2
 80001ea:	4812      	ldr	r0, [pc, #72]	@ (8000234 <EPD_WR_Bus+0x64>)
 80001ec:	f7ff ffbe 	bl	800016c <GPIO_ResetBits>
    if (dat & 0x80)
 80001f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	da04      	bge.n	8000202 <EPD_WR_Bus+0x32>
    {
      EPD_SDA_Set();
 80001f8:	2104      	movs	r1, #4
 80001fa:	480e      	ldr	r0, [pc, #56]	@ (8000234 <EPD_WR_Bus+0x64>)
 80001fc:	f7ff ffa6 	bl	800014c <GPIO_SetBits>
 8000200:	e003      	b.n	800020a <EPD_WR_Bus+0x3a>
    }
    else
    {
      EPD_SDA_Clr();
 8000202:	2104      	movs	r1, #4
 8000204:	480b      	ldr	r0, [pc, #44]	@ (8000234 <EPD_WR_Bus+0x64>)
 8000206:	f7ff ffb1 	bl	800016c <GPIO_ResetBits>
    }
    EPD_SCL_Set();
 800020a:	2102      	movs	r1, #2
 800020c:	4809      	ldr	r0, [pc, #36]	@ (8000234 <EPD_WR_Bus+0x64>)
 800020e:	f7ff ff9d 	bl	800014c <GPIO_SetBits>
    dat <<= 1;
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	005b      	lsls	r3, r3, #1
 8000216:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++)
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	3301      	adds	r3, #1
 800021c:	73fb      	strb	r3, [r7, #15]
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	2b07      	cmp	r3, #7
 8000222:	d9e1      	bls.n	80001e8 <EPD_WR_Bus+0x18>
  }
  EPD_CS_Set();
 8000224:	2120      	movs	r1, #32
 8000226:	4803      	ldr	r0, [pc, #12]	@ (8000234 <EPD_WR_Bus+0x64>)
 8000228:	f7ff ff90 	bl	800014c <GPIO_SetBits>
}
 800022c:	bf00      	nop
 800022e:	3710      	adds	r7, #16
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40010800 	.word	0x40010800

08000238 <EPD_WR_REG>:

// 写入一个命令
void EPD_WR_REG(uint8_t reg)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	71fb      	strb	r3, [r7, #7]
  EPD_DC_Clr();
 8000242:	2110      	movs	r1, #16
 8000244:	4807      	ldr	r0, [pc, #28]	@ (8000264 <EPD_WR_REG+0x2c>)
 8000246:	f7ff ff91 	bl	800016c <GPIO_ResetBits>
  EPD_WR_Bus(reg);
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	4618      	mov	r0, r3
 800024e:	f7ff ffbf 	bl	80001d0 <EPD_WR_Bus>
  EPD_DC_Set();
 8000252:	2110      	movs	r1, #16
 8000254:	4803      	ldr	r0, [pc, #12]	@ (8000264 <EPD_WR_REG+0x2c>)
 8000256:	f7ff ff79 	bl	800014c <GPIO_SetBits>
}
 800025a:	bf00      	nop
 800025c:	3708      	adds	r7, #8
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40010800 	.word	0x40010800

08000268 <EPD_WR_DATA8>:

// 写入一个字节
void EPD_WR_DATA8(uint8_t dat)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	71fb      	strb	r3, [r7, #7]
  EPD_WR_Bus(dat);
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	4618      	mov	r0, r3
 8000276:	f7ff ffab 	bl	80001d0 <EPD_WR_Bus>
}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <Epaper_READBUSY>:

PAINT Paint;

void Epaper_READBUSY()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  while (1)
  {
    if (EPD_BUSY() == 0)
 8000288:	2140      	movs	r1, #64	@ 0x40
 800028a:	4805      	ldr	r0, [pc, #20]	@ (80002a0 <Epaper_READBUSY+0x1c>)
 800028c:	f001 fac6 	bl	800181c <HAL_GPIO_ReadPin>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d000      	beq.n	8000298 <Epaper_READBUSY+0x14>
 8000296:	e7f7      	b.n	8000288 <Epaper_READBUSY+0x4>
    {
      break;
 8000298:	bf00      	nop
    }
  }
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40010800 	.word	0x40010800

080002a4 <EPD_Update>:

void EPD_Update(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  EPD_WR_REG(0x22); // Display Update Control
 80002a8:	2022      	movs	r0, #34	@ 0x22
 80002aa:	f7ff ffc5 	bl	8000238 <EPD_WR_REG>
  EPD_WR_DATA8(0xF7); // 官方方法(全刷)
 80002ae:	20f7      	movs	r0, #247	@ 0xf7
 80002b0:	f7ff ffda 	bl	8000268 <EPD_WR_DATA8>
//  EPD_WR_DATA8(0xFF); // 官方注释
//  EPD_WR_DATA8(0xB1); // 网上全刷
//  EPD_WR_DATA8(0xB9); // 网上局刷
  EPD_WR_REG(0x20); // Activate Display Update Sequence
 80002b4:	2020      	movs	r0, #32
 80002b6:	f7ff ffbf 	bl	8000238 <EPD_WR_REG>
  Epaper_READBUSY();
 80002ba:	f7ff ffe3 	bl	8000284 <Epaper_READBUSY>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <EPD_GUIInit>:

// 初始化屏幕
void EPD_GUIInit(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  EPD_GPIOInit();
 80002c8:	f7ff ff60 	bl	800018c <EPD_GPIOInit>
  EPD_RES_Clr(); // Module reset
 80002cc:	2108      	movs	r1, #8
 80002ce:	4833      	ldr	r0, [pc, #204]	@ (800039c <EPD_GUIInit+0xd8>)
 80002d0:	f7ff ff4c 	bl	800016c <GPIO_ResetBits>
  delay_ms(20);  // At least 10ms delay
 80002d4:	2014      	movs	r0, #20
 80002d6:	f000 fd9d 	bl	8000e14 <delay_ms>
  EPD_RES_Set();
 80002da:	2108      	movs	r1, #8
 80002dc:	482f      	ldr	r0, [pc, #188]	@ (800039c <EPD_GUIInit+0xd8>)
 80002de:	f7ff ff35 	bl	800014c <GPIO_SetBits>
  delay_ms(20); // At least 10ms delay
 80002e2:	2014      	movs	r0, #20
 80002e4:	f000 fd96 	bl	8000e14 <delay_ms>

  Epaper_READBUSY();
 80002e8:	f7ff ffcc 	bl	8000284 <Epaper_READBUSY>
  EPD_WR_REG(0x12); // SWRESET
 80002ec:	2012      	movs	r0, #18
 80002ee:	f7ff ffa3 	bl	8000238 <EPD_WR_REG>
  Epaper_READBUSY();
 80002f2:	f7ff ffc7 	bl	8000284 <Epaper_READBUSY>

  EPD_WR_REG(0x01); // Driver output control
 80002f6:	2001      	movs	r0, #1
 80002f8:	f7ff ff9e 	bl	8000238 <EPD_WR_REG>
  EPD_WR_DATA8(0x27);
 80002fc:	2027      	movs	r0, #39	@ 0x27
 80002fe:	f7ff ffb3 	bl	8000268 <EPD_WR_DATA8>
  EPD_WR_DATA8(0x01);
 8000302:	2001      	movs	r0, #1
 8000304:	f7ff ffb0 	bl	8000268 <EPD_WR_DATA8>
  EPD_WR_DATA8(0x01);
 8000308:	2001      	movs	r0, #1
 800030a:	f7ff ffad 	bl	8000268 <EPD_WR_DATA8>

  EPD_WR_REG(0x11); // data entry mode
 800030e:	2011      	movs	r0, #17
 8000310:	f7ff ff92 	bl	8000238 <EPD_WR_REG>
  EPD_WR_DATA8(0x01);
 8000314:	2001      	movs	r0, #1
 8000316:	f7ff ffa7 	bl	8000268 <EPD_WR_DATA8>

  EPD_WR_REG(0x44); // set Ram-X address start/end position
 800031a:	2044      	movs	r0, #68	@ 0x44
 800031c:	f7ff ff8c 	bl	8000238 <EPD_WR_REG>
  EPD_WR_DATA8(0x00);
 8000320:	2000      	movs	r0, #0
 8000322:	f7ff ffa1 	bl	8000268 <EPD_WR_DATA8>
  EPD_WR_DATA8(0x0F); // 0x0F-->(15+1)*8=128
 8000326:	200f      	movs	r0, #15
 8000328:	f7ff ff9e 	bl	8000268 <EPD_WR_DATA8>

  EPD_WR_REG(0x45);   // set Ram-Y address start/end position
 800032c:	2045      	movs	r0, #69	@ 0x45
 800032e:	f7ff ff83 	bl	8000238 <EPD_WR_REG>
  EPD_WR_DATA8(0x27); // 0xF9-->(249+1)=250
 8000332:	2027      	movs	r0, #39	@ 0x27
 8000334:	f7ff ff98 	bl	8000268 <EPD_WR_DATA8>
  EPD_WR_DATA8(0x01);
 8000338:	2001      	movs	r0, #1
 800033a:	f7ff ff95 	bl	8000268 <EPD_WR_DATA8>
  EPD_WR_DATA8(0x00);
 800033e:	2000      	movs	r0, #0
 8000340:	f7ff ff92 	bl	8000268 <EPD_WR_DATA8>
  EPD_WR_DATA8(0x00);
 8000344:	2000      	movs	r0, #0
 8000346:	f7ff ff8f 	bl	8000268 <EPD_WR_DATA8>

  EPD_WR_REG(0x3C); // BorderWavefrom
 800034a:	203c      	movs	r0, #60	@ 0x3c
 800034c:	f7ff ff74 	bl	8000238 <EPD_WR_REG>
  EPD_WR_DATA8(0x05);
 8000350:	2005      	movs	r0, #5
 8000352:	f7ff ff89 	bl	8000268 <EPD_WR_DATA8>

  EPD_WR_REG(0x21); //  Display update control
 8000356:	2021      	movs	r0, #33	@ 0x21
 8000358:	f7ff ff6e 	bl	8000238 <EPD_WR_REG>
  EPD_WR_DATA8(0x00);
 800035c:	2000      	movs	r0, #0
 800035e:	f7ff ff83 	bl	8000268 <EPD_WR_DATA8>
  EPD_WR_DATA8(0x80);
 8000362:	2080      	movs	r0, #128	@ 0x80
 8000364:	f7ff ff80 	bl	8000268 <EPD_WR_DATA8>

  EPD_WR_REG(0x18); // Read built-in temperature sensor
 8000368:	2018      	movs	r0, #24
 800036a:	f7ff ff65 	bl	8000238 <EPD_WR_REG>
  EPD_WR_DATA8(0x80);
 800036e:	2080      	movs	r0, #128	@ 0x80
 8000370:	f7ff ff7a 	bl	8000268 <EPD_WR_DATA8>

  EPD_WR_REG(0x4E); // set RAM x address count to 0;
 8000374:	204e      	movs	r0, #78	@ 0x4e
 8000376:	f7ff ff5f 	bl	8000238 <EPD_WR_REG>
  EPD_WR_DATA8(0x00);
 800037a:	2000      	movs	r0, #0
 800037c:	f7ff ff74 	bl	8000268 <EPD_WR_DATA8>
  EPD_WR_REG(0x4F); // set RAM y address count to 0X199;
 8000380:	204f      	movs	r0, #79	@ 0x4f
 8000382:	f7ff ff59 	bl	8000238 <EPD_WR_REG>
  EPD_WR_DATA8(0x27);
 8000386:	2027      	movs	r0, #39	@ 0x27
 8000388:	f7ff ff6e 	bl	8000268 <EPD_WR_DATA8>
  EPD_WR_DATA8(0x01);
 800038c:	2001      	movs	r0, #1
 800038e:	f7ff ff6b 	bl	8000268 <EPD_WR_DATA8>

  Epaper_READBUSY();
 8000392:	f7ff ff77 	bl	8000284 <Epaper_READBUSY>
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010800 	.word	0x40010800

080003a0 <Paint_NewImage>:

void Paint_NewImage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	4608      	mov	r0, r1
 80003aa:	4611      	mov	r1, r2
 80003ac:	461a      	mov	r2, r3
 80003ae:	4603      	mov	r3, r0
 80003b0:	817b      	strh	r3, [r7, #10]
 80003b2:	460b      	mov	r3, r1
 80003b4:	813b      	strh	r3, [r7, #8]
 80003b6:	4613      	mov	r3, r2
 80003b8:	80fb      	strh	r3, [r7, #6]
  Paint.Image = 0x00;
 80003ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000438 <Paint_NewImage+0x98>)
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
  Paint.Image = image;
 80003c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000438 <Paint_NewImage+0x98>)
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	6013      	str	r3, [r2, #0]

  Paint.WidthMemory = Width;
 80003c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000438 <Paint_NewImage+0x98>)
 80003c8:	897b      	ldrh	r3, [r7, #10]
 80003ca:	8113      	strh	r3, [r2, #8]
  Paint.HeightMemory = Height;
 80003cc:	4a1a      	ldr	r2, [pc, #104]	@ (8000438 <Paint_NewImage+0x98>)
 80003ce:	893b      	ldrh	r3, [r7, #8]
 80003d0:	8153      	strh	r3, [r2, #10]
  Paint.Color = Color;
 80003d2:	4a19      	ldr	r2, [pc, #100]	@ (8000438 <Paint_NewImage+0x98>)
 80003d4:	8b3b      	ldrh	r3, [r7, #24]
 80003d6:	8193      	strh	r3, [r2, #12]
  Paint.WidthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 80003d8:	897b      	ldrh	r3, [r7, #10]
 80003da:	f003 0307 	and.w	r3, r3, #7
 80003de:	b29b      	uxth	r3, r3
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d103      	bne.n	80003ec <Paint_NewImage+0x4c>
 80003e4:	897b      	ldrh	r3, [r7, #10]
 80003e6:	08db      	lsrs	r3, r3, #3
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	e004      	b.n	80003f6 <Paint_NewImage+0x56>
 80003ec:	897b      	ldrh	r3, [r7, #10]
 80003ee:	08db      	lsrs	r3, r3, #3
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	3301      	adds	r3, #1
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	4a10      	ldr	r2, [pc, #64]	@ (8000438 <Paint_NewImage+0x98>)
 80003f8:	8213      	strh	r3, [r2, #16]
  Paint.HeightByte = Height;
 80003fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000438 <Paint_NewImage+0x98>)
 80003fc:	893b      	ldrh	r3, [r7, #8]
 80003fe:	8253      	strh	r3, [r2, #18]
  Paint.Rotate = Rotate;
 8000400:	4a0d      	ldr	r2, [pc, #52]	@ (8000438 <Paint_NewImage+0x98>)
 8000402:	88fb      	ldrh	r3, [r7, #6]
 8000404:	81d3      	strh	r3, [r2, #14]
  if (Rotate == ROTATE_0 || Rotate == ROTATE_180)
 8000406:	88fb      	ldrh	r3, [r7, #6]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d002      	beq.n	8000412 <Paint_NewImage+0x72>
 800040c:	88fb      	ldrh	r3, [r7, #6]
 800040e:	2bb4      	cmp	r3, #180	@ 0xb4
 8000410:	d106      	bne.n	8000420 <Paint_NewImage+0x80>
  {
    Paint.Width = Width;
 8000412:	4a09      	ldr	r2, [pc, #36]	@ (8000438 <Paint_NewImage+0x98>)
 8000414:	897b      	ldrh	r3, [r7, #10]
 8000416:	8093      	strh	r3, [r2, #4]
    Paint.Height = Height;
 8000418:	4a07      	ldr	r2, [pc, #28]	@ (8000438 <Paint_NewImage+0x98>)
 800041a:	893b      	ldrh	r3, [r7, #8]
 800041c:	80d3      	strh	r3, [r2, #6]
 800041e:	e006      	b.n	800042e <Paint_NewImage+0x8e>
  }
  else
  {
    Paint.Width = Height;
 8000420:	4a05      	ldr	r2, [pc, #20]	@ (8000438 <Paint_NewImage+0x98>)
 8000422:	893b      	ldrh	r3, [r7, #8]
 8000424:	8093      	strh	r3, [r2, #4]
    Paint.Height = Width;
 8000426:	4a04      	ldr	r2, [pc, #16]	@ (8000438 <Paint_NewImage+0x98>)
 8000428:	897b      	ldrh	r3, [r7, #10]
 800042a:	80d3      	strh	r3, [r2, #6]
  }
}
 800042c:	bf00      	nop
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	20000028 	.word	0x20000028

0800043c <Paint_SetPixel>:

void Paint_SetPixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 800043c:	b480      	push	{r7}
 800043e:	b087      	sub	sp, #28
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	80fb      	strh	r3, [r7, #6]
 8000446:	460b      	mov	r3, r1
 8000448:	80bb      	strh	r3, [r7, #4]
 800044a:	4613      	mov	r3, r2
 800044c:	807b      	strh	r3, [r7, #2]
  uint16_t X, Y;
  uint32_t Addr;
  uint8_t Rdata;
  switch (Paint.Rotate)
 800044e:	4b3c      	ldr	r3, [pc, #240]	@ (8000540 <Paint_SetPixel+0x104>)
 8000450:	89db      	ldrh	r3, [r3, #14]
 8000452:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000456:	d02e      	beq.n	80004b6 <Paint_SetPixel+0x7a>
 8000458:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800045c:	dc6a      	bgt.n	8000534 <Paint_SetPixel+0xf8>
 800045e:	2bb4      	cmp	r3, #180	@ 0xb4
 8000460:	d01f      	beq.n	80004a2 <Paint_SetPixel+0x66>
 8000462:	2bb4      	cmp	r3, #180	@ 0xb4
 8000464:	dc66      	bgt.n	8000534 <Paint_SetPixel+0xf8>
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <Paint_SetPixel+0x34>
 800046a:	2b5a      	cmp	r3, #90	@ 0x5a
 800046c:	d00a      	beq.n	8000484 <Paint_SetPixel+0x48>
  case 270:
    X = Xpoint;
    Y = Ypoint;
    break;
  default:
    return;
 800046e:	e061      	b.n	8000534 <Paint_SetPixel+0xf8>
    X = Paint.WidthMemory - Ypoint - 1;
 8000470:	4b33      	ldr	r3, [pc, #204]	@ (8000540 <Paint_SetPixel+0x104>)
 8000472:	891a      	ldrh	r2, [r3, #8]
 8000474:	88bb      	ldrh	r3, [r7, #4]
 8000476:	1ad3      	subs	r3, r2, r3
 8000478:	b29b      	uxth	r3, r3
 800047a:	3b01      	subs	r3, #1
 800047c:	82fb      	strh	r3, [r7, #22]
    Y = Xpoint;
 800047e:	88fb      	ldrh	r3, [r7, #6]
 8000480:	82bb      	strh	r3, [r7, #20]
    break;
 8000482:	e01d      	b.n	80004c0 <Paint_SetPixel+0x84>
    X = Paint.WidthMemory - Xpoint - 1;
 8000484:	4b2e      	ldr	r3, [pc, #184]	@ (8000540 <Paint_SetPixel+0x104>)
 8000486:	891a      	ldrh	r2, [r3, #8]
 8000488:	88fb      	ldrh	r3, [r7, #6]
 800048a:	1ad3      	subs	r3, r2, r3
 800048c:	b29b      	uxth	r3, r3
 800048e:	3b01      	subs	r3, #1
 8000490:	82fb      	strh	r3, [r7, #22]
    Y = Paint.HeightMemory - Ypoint - 1;
 8000492:	4b2b      	ldr	r3, [pc, #172]	@ (8000540 <Paint_SetPixel+0x104>)
 8000494:	895a      	ldrh	r2, [r3, #10]
 8000496:	88bb      	ldrh	r3, [r7, #4]
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	b29b      	uxth	r3, r3
 800049c:	3b01      	subs	r3, #1
 800049e:	82bb      	strh	r3, [r7, #20]
    break;
 80004a0:	e00e      	b.n	80004c0 <Paint_SetPixel+0x84>
    X = Ypoint;
 80004a2:	88bb      	ldrh	r3, [r7, #4]
 80004a4:	82fb      	strh	r3, [r7, #22]
    Y = Paint.HeightMemory - Xpoint - 1;
 80004a6:	4b26      	ldr	r3, [pc, #152]	@ (8000540 <Paint_SetPixel+0x104>)
 80004a8:	895a      	ldrh	r2, [r3, #10]
 80004aa:	88fb      	ldrh	r3, [r7, #6]
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	3b01      	subs	r3, #1
 80004b2:	82bb      	strh	r3, [r7, #20]
    break;
 80004b4:	e004      	b.n	80004c0 <Paint_SetPixel+0x84>
    X = Xpoint;
 80004b6:	88fb      	ldrh	r3, [r7, #6]
 80004b8:	82fb      	strh	r3, [r7, #22]
    Y = Ypoint;
 80004ba:	88bb      	ldrh	r3, [r7, #4]
 80004bc:	82bb      	strh	r3, [r7, #20]
    break;
 80004be:	bf00      	nop
  }
  Addr = X / 8 + Y * Paint.WidthByte;
 80004c0:	8afb      	ldrh	r3, [r7, #22]
 80004c2:	08db      	lsrs	r3, r3, #3
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	4619      	mov	r1, r3
 80004c8:	8abb      	ldrh	r3, [r7, #20]
 80004ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000540 <Paint_SetPixel+0x104>)
 80004cc:	8a12      	ldrh	r2, [r2, #16]
 80004ce:	fb02 f303 	mul.w	r3, r2, r3
 80004d2:	440b      	add	r3, r1
 80004d4:	613b      	str	r3, [r7, #16]
  Rdata = Paint.Image[Addr];
 80004d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000540 <Paint_SetPixel+0x104>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	4413      	add	r3, r2
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	73fb      	strb	r3, [r7, #15]
  if (Color == BLACK)
 80004e2:	887b      	ldrh	r3, [r7, #2]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d113      	bne.n	8000510 <Paint_SetPixel+0xd4>
  {
    Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8)); // 将对应数据位置0
 80004e8:	8afb      	ldrh	r3, [r7, #22]
 80004ea:	f003 0307 	and.w	r3, r3, #7
 80004ee:	2280      	movs	r2, #128	@ 0x80
 80004f0:	fa42 f303 	asr.w	r3, r2, r3
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	43db      	mvns	r3, r3
 80004f8:	b25a      	sxtb	r2, r3
 80004fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004fe:	4013      	ands	r3, r2
 8000500:	b259      	sxtb	r1, r3
 8000502:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <Paint_SetPixel+0x104>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	4413      	add	r3, r2
 800050a:	b2ca      	uxtb	r2, r1
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	e012      	b.n	8000536 <Paint_SetPixel+0xfa>
  }
  else
    Paint.Image[Addr] = Rdata | (0x80 >> (X % 8)); // 将对应数据位置1
 8000510:	8afb      	ldrh	r3, [r7, #22]
 8000512:	f003 0307 	and.w	r3, r3, #7
 8000516:	2280      	movs	r2, #128	@ 0x80
 8000518:	fa42 f303 	asr.w	r3, r2, r3
 800051c:	b25a      	sxtb	r2, r3
 800051e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000522:	4313      	orrs	r3, r2
 8000524:	b259      	sxtb	r1, r3
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <Paint_SetPixel+0x104>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	4413      	add	r3, r2
 800052e:	b2ca      	uxtb	r2, r1
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	e000      	b.n	8000536 <Paint_SetPixel+0xfa>
    return;
 8000534:	bf00      	nop
}
 8000536:	371c      	adds	r7, #28
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000028 	.word	0x20000028

08000544 <EPD_Clear>:

// 清屏函数
void EPD_Clear(uint16_t Color)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
  uint16_t X, Y;
  uint32_t Addr;
  for (Y = 0; Y < Paint.HeightByte; Y++)
 800054e:	2300      	movs	r3, #0
 8000550:	81bb      	strh	r3, [r7, #12]
 8000552:	e01c      	b.n	800058e <EPD_Clear+0x4a>
  {
    for (X = 0; X < Paint.WidthByte; X++)
 8000554:	2300      	movs	r3, #0
 8000556:	81fb      	strh	r3, [r7, #14]
 8000558:	e011      	b.n	800057e <EPD_Clear+0x3a>
    { // 8 pixel =  1 byte
      Addr = X + Y * Paint.WidthByte;
 800055a:	89fa      	ldrh	r2, [r7, #14]
 800055c:	89bb      	ldrh	r3, [r7, #12]
 800055e:	4911      	ldr	r1, [pc, #68]	@ (80005a4 <EPD_Clear+0x60>)
 8000560:	8a09      	ldrh	r1, [r1, #16]
 8000562:	fb01 f303 	mul.w	r3, r1, r3
 8000566:	4413      	add	r3, r2
 8000568:	60bb      	str	r3, [r7, #8]
      Paint.Image[Addr] = Color;
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <EPD_Clear+0x60>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	4413      	add	r3, r2
 8000572:	88fa      	ldrh	r2, [r7, #6]
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	701a      	strb	r2, [r3, #0]
    for (X = 0; X < Paint.WidthByte; X++)
 8000578:	89fb      	ldrh	r3, [r7, #14]
 800057a:	3301      	adds	r3, #1
 800057c:	81fb      	strh	r3, [r7, #14]
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <EPD_Clear+0x60>)
 8000580:	8a1b      	ldrh	r3, [r3, #16]
 8000582:	89fa      	ldrh	r2, [r7, #14]
 8000584:	429a      	cmp	r2, r3
 8000586:	d3e8      	bcc.n	800055a <EPD_Clear+0x16>
  for (Y = 0; Y < Paint.HeightByte; Y++)
 8000588:	89bb      	ldrh	r3, [r7, #12]
 800058a:	3301      	adds	r3, #1
 800058c:	81bb      	strh	r3, [r7, #12]
 800058e:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <EPD_Clear+0x60>)
 8000590:	8a5b      	ldrh	r3, [r3, #18]
 8000592:	89ba      	ldrh	r2, [r7, #12]
 8000594:	429a      	cmp	r2, r3
 8000596:	d3dd      	bcc.n	8000554 <EPD_Clear+0x10>
    }
  }
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	20000028 	.word	0x20000028

080005a8 <EPD_DrawPoint>:

// 画点函数
void EPD_DrawPoint(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	80fb      	strh	r3, [r7, #6]
 80005b2:	460b      	mov	r3, r1
 80005b4:	80bb      	strh	r3, [r7, #4]
 80005b6:	4613      	mov	r3, r2
 80005b8:	807b      	strh	r3, [r7, #2]
  Paint_SetPixel(Xpoint - 1, Ypoint - 1, Color);
 80005ba:	88fb      	ldrh	r3, [r7, #6]
 80005bc:	3b01      	subs	r3, #1
 80005be:	b298      	uxth	r0, r3
 80005c0:	88bb      	ldrh	r3, [r7, #4]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	887a      	ldrh	r2, [r7, #2]
 80005c8:	4619      	mov	r1, r3
 80005ca:	f7ff ff37 	bl	800043c <Paint_SetPixel>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <EPD_Display>:

// 更新到显存
void EPD_Display(unsigned char *Image)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b088      	sub	sp, #32
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
  unsigned int Width, Height, i, j;
  uint32_t k = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  Width = 296;
 80005e2:	f44f 7394 	mov.w	r3, #296	@ 0x128
 80005e6:	613b      	str	r3, [r7, #16]
  Height = 16;
 80005e8:	2310      	movs	r3, #16
 80005ea:	60fb      	str	r3, [r7, #12]
  EPD_WR_REG(0x24);
 80005ec:	2024      	movs	r0, #36	@ 0x24
 80005ee:	f7ff fe23 	bl	8000238 <EPD_WR_REG>
  for (j = 0; j < Height; j++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
 80005f6:	e016      	b.n	8000626 <EPD_Display+0x50>
  {
    for (i = 0; i < Width; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
 80005fc:	e00c      	b.n	8000618 <EPD_Display+0x42>
    {
      EPD_WR_DATA8(Image[k]);
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fe2e 	bl	8000268 <EPD_WR_DATA8>
      k++;
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	3301      	adds	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
    for (i = 0; i < Width; i++)
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	3301      	adds	r3, #1
 8000616:	61fb      	str	r3, [r7, #28]
 8000618:	69fa      	ldr	r2, [r7, #28]
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	429a      	cmp	r2, r3
 800061e:	d3ee      	bcc.n	80005fe <EPD_Display+0x28>
  for (j = 0; j < Height; j++)
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	3301      	adds	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
 8000626:	69ba      	ldr	r2, [r7, #24]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	429a      	cmp	r2, r3
 800062c:	d3e4      	bcc.n	80005f8 <EPD_Display+0x22>
    }
  }
  EPD_Update();
 800062e:	f7ff fe39 	bl	80002a4 <EPD_Update>
}
 8000632:	bf00      	nop
 8000634:	3720      	adds	r7, #32
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <EPD_DrawLine>:

// 画直线
void EPD_DrawLine(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend, uint16_t Color)
{
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b08b      	sub	sp, #44	@ 0x2c
 800063e:	af00      	add	r7, sp, #0
 8000640:	4604      	mov	r4, r0
 8000642:	4608      	mov	r0, r1
 8000644:	4611      	mov	r1, r2
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4603      	mov	r3, r0
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
  uint16_t Xpoint, Ypoint;
  int dx, dy;
  int XAddway, YAddway;
  int Esp;
  char Dotted_Len;
  Xpoint = Xstart;
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  Ypoint = Ystart;
 800065c:	88bb      	ldrh	r3, [r7, #4]
 800065e:	84bb      	strh	r3, [r7, #36]	@ 0x24
  dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8000660:	887a      	ldrh	r2, [r7, #2]
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	bfb8      	it	lt
 800066a:	425b      	neglt	r3, r3
 800066c:	61bb      	str	r3, [r7, #24]
  dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800066e:	883a      	ldrh	r2, [r7, #0]
 8000670:	88bb      	ldrh	r3, [r7, #4]
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	bfb8      	it	lt
 8000678:	425b      	neglt	r3, r3
 800067a:	425b      	negs	r3, r3
 800067c:	617b      	str	r3, [r7, #20]

  XAddway = Xstart < Xend ? 1 : -1;
 800067e:	88fa      	ldrh	r2, [r7, #6]
 8000680:	887b      	ldrh	r3, [r7, #2]
 8000682:	429a      	cmp	r2, r3
 8000684:	d201      	bcs.n	800068a <EPD_DrawLine+0x50>
 8000686:	2301      	movs	r3, #1
 8000688:	e001      	b.n	800068e <EPD_DrawLine+0x54>
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	613b      	str	r3, [r7, #16]
  YAddway = Ystart < Yend ? 1 : -1;
 8000690:	88ba      	ldrh	r2, [r7, #4]
 8000692:	883b      	ldrh	r3, [r7, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d201      	bcs.n	800069c <EPD_DrawLine+0x62>
 8000698:	2301      	movs	r3, #1
 800069a:	e001      	b.n	80006a0 <EPD_DrawLine+0x66>
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	60fb      	str	r3, [r7, #12]

  Esp = dx + dy;
 80006a2:	69ba      	ldr	r2, [r7, #24]
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	4413      	add	r3, r2
 80006a8:	623b      	str	r3, [r7, #32]
  Dotted_Len = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	77fb      	strb	r3, [r7, #31]

  for (;;)
  {
    Dotted_Len++;
 80006ae:	7ffb      	ldrb	r3, [r7, #31]
 80006b0:	3301      	adds	r3, #1
 80006b2:	77fb      	strb	r3, [r7, #31]
    EPD_DrawPoint(Xpoint, Ypoint, Color);
 80006b4:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80006b6:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80006b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff74 	bl	80005a8 <EPD_DrawPoint>
    if (2 * Esp >= dy)
 80006c0:	6a3b      	ldr	r3, [r7, #32]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dc0c      	bgt.n	80006e4 <EPD_DrawLine+0xaa>
    {
      if (Xpoint == Xend)
 80006ca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80006cc:	887b      	ldrh	r3, [r7, #2]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d01b      	beq.n	800070a <EPD_DrawLine+0xd0>
        break;
      Esp += dy;
 80006d2:	6a3a      	ldr	r2, [r7, #32]
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	4413      	add	r3, r2
 80006d8:	623b      	str	r3, [r7, #32]
      Xpoint += XAddway;
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	b29a      	uxth	r2, r3
 80006de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006e0:	4413      	add	r3, r2
 80006e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
    if (2 * Esp <= dx)
 80006e4:	6a3b      	ldr	r3, [r7, #32]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	69ba      	ldr	r2, [r7, #24]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	dbdf      	blt.n	80006ae <EPD_DrawLine+0x74>
    {
      if (Ypoint == Yend)
 80006ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80006f0:	883b      	ldrh	r3, [r7, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d00b      	beq.n	800070e <EPD_DrawLine+0xd4>
        break;
      Esp += dx;
 80006f6:	6a3a      	ldr	r2, [r7, #32]
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	4413      	add	r3, r2
 80006fc:	623b      	str	r3, [r7, #32]
      Ypoint += YAddway;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	b29a      	uxth	r2, r3
 8000702:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000704:	4413      	add	r3, r2
 8000706:	84bb      	strh	r3, [r7, #36]	@ 0x24
    Dotted_Len++;
 8000708:	e7d1      	b.n	80006ae <EPD_DrawLine+0x74>
        break;
 800070a:	bf00      	nop
 800070c:	e000      	b.n	8000710 <EPD_DrawLine+0xd6>
        break;
 800070e:	bf00      	nop
    }
  }
}
 8000710:	bf00      	nop
 8000712:	372c      	adds	r7, #44	@ 0x2c
 8000714:	46bd      	mov	sp, r7
 8000716:	bd90      	pop	{r4, r7, pc}

08000718 <EPD_ShowChar>:
  }
}

// 显示字符
void EPD_ShowChar(uint16_t x, uint16_t y, uint16_t chr, uint16_t size1, uint16_t color)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b087      	sub	sp, #28
 800071c:	af00      	add	r7, sp, #0
 800071e:	4604      	mov	r4, r0
 8000720:	4608      	mov	r0, r1
 8000722:	4611      	mov	r1, r2
 8000724:	461a      	mov	r2, r3
 8000726:	4623      	mov	r3, r4
 8000728:	80fb      	strh	r3, [r7, #6]
 800072a:	4603      	mov	r3, r0
 800072c:	80bb      	strh	r3, [r7, #4]
 800072e:	460b      	mov	r3, r1
 8000730:	807b      	strh	r3, [r7, #2]
 8000732:	4613      	mov	r3, r2
 8000734:	803b      	strh	r3, [r7, #0]
  uint16_t i, m, temp, size2, chr1;
  uint16_t x0, y0;
  x += 1, y += 1, x0 = x, y0 = y;
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	3301      	adds	r3, #1
 800073a:	80fb      	strh	r3, [r7, #6]
 800073c:	88bb      	ldrh	r3, [r7, #4]
 800073e:	3301      	adds	r3, #1
 8000740:	80bb      	strh	r3, [r7, #4]
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	81bb      	strh	r3, [r7, #12]
 8000746:	88bb      	ldrh	r3, [r7, #4]
 8000748:	81fb      	strh	r3, [r7, #14]
  if (size1 == 8)
 800074a:	883b      	ldrh	r3, [r7, #0]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d102      	bne.n	8000756 <EPD_ShowChar+0x3e>
    size2 = 6;
 8000750:	2306      	movs	r3, #6
 8000752:	823b      	strh	r3, [r7, #16]
 8000754:	e014      	b.n	8000780 <EPD_ShowChar+0x68>
  else
    size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 8000756:	883b      	ldrh	r3, [r7, #0]
 8000758:	08db      	lsrs	r3, r3, #3
 800075a:	b29b      	uxth	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	883b      	ldrh	r3, [r7, #0]
 8000760:	f003 0307 	and.w	r3, r3, #7
 8000764:	b29b      	uxth	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	bf14      	ite	ne
 800076a:	2301      	movne	r3, #1
 800076c:	2300      	moveq	r3, #0
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4413      	add	r3, r2
 8000772:	b29b      	uxth	r3, r3
 8000774:	883a      	ldrh	r2, [r7, #0]
 8000776:	0852      	lsrs	r2, r2, #1
 8000778:	b292      	uxth	r2, r2
 800077a:	fb02 f303 	mul.w	r3, r2, r3
 800077e:	823b      	strh	r3, [r7, #16]
  chr1 = chr - ' ';                                            // 计算偏移后的值
 8000780:	887b      	ldrh	r3, [r7, #2]
 8000782:	3b20      	subs	r3, #32
 8000784:	817b      	strh	r3, [r7, #10]
  for (i = 0; i < size2; i++)
 8000786:	2300      	movs	r3, #0
 8000788:	82fb      	strh	r3, [r7, #22]
 800078a:	e076      	b.n	800087a <EPD_ShowChar+0x162>
  {
    if (size1 == 8)
 800078c:	883b      	ldrh	r3, [r7, #0]
 800078e:	2b08      	cmp	r3, #8
 8000790:	d10b      	bne.n	80007aa <EPD_ShowChar+0x92>
    {
      temp = asc2_0806[chr1][i];
 8000792:	897a      	ldrh	r2, [r7, #10]
 8000794:	8af9      	ldrh	r1, [r7, #22]
 8000796:	483d      	ldr	r0, [pc, #244]	@ (800088c <EPD_ShowChar+0x174>)
 8000798:	4613      	mov	r3, r2
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	4413      	add	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4403      	add	r3, r0
 80007a2:	440b      	add	r3, r1
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	827b      	strh	r3, [r7, #18]
 80007a8:	e028      	b.n	80007fc <EPD_ShowChar+0xe4>
    } // 调用0806字体
    else if (size1 == 12)
 80007aa:	883b      	ldrh	r3, [r7, #0]
 80007ac:	2b0c      	cmp	r3, #12
 80007ae:	d10b      	bne.n	80007c8 <EPD_ShowChar+0xb0>
    {
      temp = asc2_1206[chr1][i];
 80007b0:	897a      	ldrh	r2, [r7, #10]
 80007b2:	8af9      	ldrh	r1, [r7, #22]
 80007b4:	4836      	ldr	r0, [pc, #216]	@ (8000890 <EPD_ShowChar+0x178>)
 80007b6:	4613      	mov	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	4413      	add	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4403      	add	r3, r0
 80007c0:	440b      	add	r3, r1
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	827b      	strh	r3, [r7, #18]
 80007c6:	e019      	b.n	80007fc <EPD_ShowChar+0xe4>
    } // 调用1206字体
    else if (size1 == 16)
 80007c8:	883b      	ldrh	r3, [r7, #0]
 80007ca:	2b10      	cmp	r3, #16
 80007cc:	d108      	bne.n	80007e0 <EPD_ShowChar+0xc8>
    {
      temp = asc2_1608[chr1][i];
 80007ce:	897a      	ldrh	r2, [r7, #10]
 80007d0:	8afb      	ldrh	r3, [r7, #22]
 80007d2:	4930      	ldr	r1, [pc, #192]	@ (8000894 <EPD_ShowChar+0x17c>)
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	440a      	add	r2, r1
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	827b      	strh	r3, [r7, #18]
 80007de:	e00d      	b.n	80007fc <EPD_ShowChar+0xe4>
    } // 调用1608字体
    else if (size1 == 24)
 80007e0:	883b      	ldrh	r3, [r7, #0]
 80007e2:	2b18      	cmp	r3, #24
 80007e4:	d14e      	bne.n	8000884 <EPD_ShowChar+0x16c>
    {
      temp = asc2_2412[chr1][i];
 80007e6:	897a      	ldrh	r2, [r7, #10]
 80007e8:	8af9      	ldrh	r1, [r7, #22]
 80007ea:	482b      	ldr	r0, [pc, #172]	@ (8000898 <EPD_ShowChar+0x180>)
 80007ec:	4613      	mov	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	4413      	add	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	4403      	add	r3, r0
 80007f6:	440b      	add	r3, r1
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	827b      	strh	r3, [r7, #18]
    } // 调用2412字体
    else
      return;
    for (m = 0; m < 8; m++)
 80007fc:	2300      	movs	r3, #0
 80007fe:	82bb      	strh	r3, [r7, #20]
 8000800:	e020      	b.n	8000844 <EPD_ShowChar+0x12c>
    {
      if (temp & 0x01)
 8000802:	8a7b      	ldrh	r3, [r7, #18]
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	2b00      	cmp	r3, #0
 800080a:	d006      	beq.n	800081a <EPD_ShowChar+0x102>
        EPD_DrawPoint(x, y, color);
 800080c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800080e:	88b9      	ldrh	r1, [r7, #4]
 8000810:	88fb      	ldrh	r3, [r7, #6]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fec8 	bl	80005a8 <EPD_DrawPoint>
 8000818:	e00b      	b.n	8000832 <EPD_ShowChar+0x11a>
      else
        EPD_DrawPoint(x, y, !color);
 800081a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf0c      	ite	eq
 8000820:	2301      	moveq	r3, #1
 8000822:	2300      	movne	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	461a      	mov	r2, r3
 8000828:	88b9      	ldrh	r1, [r7, #4]
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff febb 	bl	80005a8 <EPD_DrawPoint>
      temp >>= 1;
 8000832:	8a7b      	ldrh	r3, [r7, #18]
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	827b      	strh	r3, [r7, #18]
      y++;
 8000838:	88bb      	ldrh	r3, [r7, #4]
 800083a:	3301      	adds	r3, #1
 800083c:	80bb      	strh	r3, [r7, #4]
    for (m = 0; m < 8; m++)
 800083e:	8abb      	ldrh	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	82bb      	strh	r3, [r7, #20]
 8000844:	8abb      	ldrh	r3, [r7, #20]
 8000846:	2b07      	cmp	r3, #7
 8000848:	d9db      	bls.n	8000802 <EPD_ShowChar+0xea>
    }
    x++;
 800084a:	88fb      	ldrh	r3, [r7, #6]
 800084c:	3301      	adds	r3, #1
 800084e:	80fb      	strh	r3, [r7, #6]
    if ((size1 != 8) && ((x - x0) == size1 / 2))
 8000850:	883b      	ldrh	r3, [r7, #0]
 8000852:	2b08      	cmp	r3, #8
 8000854:	d00c      	beq.n	8000870 <EPD_ShowChar+0x158>
 8000856:	88fa      	ldrh	r2, [r7, #6]
 8000858:	89bb      	ldrh	r3, [r7, #12]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	883a      	ldrh	r2, [r7, #0]
 800085e:	0852      	lsrs	r2, r2, #1
 8000860:	b292      	uxth	r2, r2
 8000862:	4293      	cmp	r3, r2
 8000864:	d104      	bne.n	8000870 <EPD_ShowChar+0x158>
    {
      x = x0;
 8000866:	89bb      	ldrh	r3, [r7, #12]
 8000868:	80fb      	strh	r3, [r7, #6]
      y0 = y0 + 8;
 800086a:	89fb      	ldrh	r3, [r7, #14]
 800086c:	3308      	adds	r3, #8
 800086e:	81fb      	strh	r3, [r7, #14]
    }
    y = y0;
 8000870:	89fb      	ldrh	r3, [r7, #14]
 8000872:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < size2; i++)
 8000874:	8afb      	ldrh	r3, [r7, #22]
 8000876:	3301      	adds	r3, #1
 8000878:	82fb      	strh	r3, [r7, #22]
 800087a:	8afa      	ldrh	r2, [r7, #22]
 800087c:	8a3b      	ldrh	r3, [r7, #16]
 800087e:	429a      	cmp	r2, r3
 8000880:	d384      	bcc.n	800078c <EPD_ShowChar+0x74>
 8000882:	e000      	b.n	8000886 <EPD_ShowChar+0x16e>
      return;
 8000884:	bf00      	nop
  }
}
 8000886:	371c      	adds	r7, #28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	08002e58 	.word	0x08002e58
 8000890:	08003080 	.word	0x08003080
 8000894:	080034f4 	.word	0x080034f4
 8000898:	08003ae4 	.word	0x08003ae4

0800089c <EPD_ShowString>:
// x,y:起点坐标
// size1:字体大小
//*chr:字符串起始地址
// mode:0,反色显示;1,正常显示
void EPD_ShowString(uint16_t x, uint16_t y, uint8_t *chr, uint16_t size1, uint16_t color)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b087      	sub	sp, #28
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	60ba      	str	r2, [r7, #8]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4603      	mov	r3, r0
 80008a8:	81fb      	strh	r3, [r7, #14]
 80008aa:	460b      	mov	r3, r1
 80008ac:	81bb      	strh	r3, [r7, #12]
 80008ae:	4613      	mov	r3, r2
 80008b0:	80fb      	strh	r3, [r7, #6]
  while (*chr != '\0') // 判断是不是非法字符!
 80008b2:	e014      	b.n	80008de <EPD_ShowString+0x42>
  {

    EPD_ShowChar(x, y, *chr, size1, color);
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461c      	mov	r4, r3
 80008ba:	88fa      	ldrh	r2, [r7, #6]
 80008bc:	89b9      	ldrh	r1, [r7, #12]
 80008be:	89f8      	ldrh	r0, [r7, #14]
 80008c0:	8c3b      	ldrh	r3, [r7, #32]
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	4613      	mov	r3, r2
 80008c6:	4622      	mov	r2, r4
 80008c8:	f7ff ff26 	bl	8000718 <EPD_ShowChar>
    chr++;
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	3301      	adds	r3, #1
 80008d0:	60bb      	str	r3, [r7, #8]
    x += size1 / 2;
 80008d2:	88fb      	ldrh	r3, [r7, #6]
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	89fb      	ldrh	r3, [r7, #14]
 80008da:	4413      	add	r3, r2
 80008dc:	81fb      	strh	r3, [r7, #14]
  while (*chr != '\0') // 判断是不是非法字符!
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1e6      	bne.n	80008b4 <EPD_ShowString+0x18>
  }
}
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd90      	pop	{r4, r7, pc}

080008f0 <EPD_Pow>:

// m^n
uint32_t EPD_Pow(uint16_t m, uint16_t n)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	460a      	mov	r2, r1
 80008fa:	80fb      	strh	r3, [r7, #6]
 80008fc:	4613      	mov	r3, r2
 80008fe:	80bb      	strh	r3, [r7, #4]
  uint32_t result = 1;
 8000900:	2301      	movs	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
  while (n--)
 8000904:	e004      	b.n	8000910 <EPD_Pow+0x20>
  {
    result *= m;
 8000906:	88fa      	ldrh	r2, [r7, #6]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	fb02 f303 	mul.w	r3, r2, r3
 800090e:	60fb      	str	r3, [r7, #12]
  while (n--)
 8000910:	88bb      	ldrh	r3, [r7, #4]
 8000912:	1e5a      	subs	r2, r3, #1
 8000914:	80ba      	strh	r2, [r7, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1f5      	bne.n	8000906 <EPD_Pow+0x16>
  }
  return result;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
	...

08000928 <EPD_ShowNum>:
// num :要显示的数字
// len :数字的位数
// size:字体大小
// mode:0,反色显示;1,正常显示
void EPD_ShowNum(uint16_t x, uint16_t y, uint32_t num, uint16_t len, uint16_t size1, uint16_t color)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b089      	sub	sp, #36	@ 0x24
 800092c:	af02      	add	r7, sp, #8
 800092e:	60ba      	str	r2, [r7, #8]
 8000930:	461a      	mov	r2, r3
 8000932:	4603      	mov	r3, r0
 8000934:	81fb      	strh	r3, [r7, #14]
 8000936:	460b      	mov	r3, r1
 8000938:	81bb      	strh	r3, [r7, #12]
 800093a:	4613      	mov	r3, r2
 800093c:	80fb      	strh	r3, [r7, #6]
  uint8_t t, temp, m = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	75bb      	strb	r3, [r7, #22]
  if (size1 == 8)
 8000942:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000944:	2b08      	cmp	r3, #8
 8000946:	d101      	bne.n	800094c <EPD_ShowNum+0x24>
    m = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	75bb      	strb	r3, [r7, #22]
  for (t = 0; t < len; t++)
 800094c:	2300      	movs	r3, #0
 800094e:	75fb      	strb	r3, [r7, #23]
 8000950:	e051      	b.n	80009f6 <EPD_ShowNum+0xce>
  {
    temp = (num / EPD_Pow(10, len - t - 1)) % 10;
 8000952:	7dfb      	ldrb	r3, [r7, #23]
 8000954:	b29b      	uxth	r3, r3
 8000956:	88fa      	ldrh	r2, [r7, #6]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	b29b      	uxth	r3, r3
 800095c:	3b01      	subs	r3, #1
 800095e:	b29b      	uxth	r3, r3
 8000960:	4619      	mov	r1, r3
 8000962:	200a      	movs	r0, #10
 8000964:	f7ff ffc4 	bl	80008f0 <EPD_Pow>
 8000968:	4602      	mov	r2, r0
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000970:	4b26      	ldr	r3, [pc, #152]	@ (8000a0c <EPD_ShowNum+0xe4>)
 8000972:	fba3 2301 	umull	r2, r3, r3, r1
 8000976:	08da      	lsrs	r2, r3, #3
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	1aca      	subs	r2, r1, r3
 8000982:	4613      	mov	r3, r2
 8000984:	757b      	strb	r3, [r7, #21]
    if (temp == 0)
 8000986:	7d7b      	ldrb	r3, [r7, #21]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d117      	bne.n	80009bc <EPD_ShowNum+0x94>
    {
      EPD_ShowChar(x + (size1 / 2 + m) * t, y, '0', size1, color);
 800098c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800098e:	085b      	lsrs	r3, r3, #1
 8000990:	b29b      	uxth	r3, r3
 8000992:	461a      	mov	r2, r3
 8000994:	7dbb      	ldrb	r3, [r7, #22]
 8000996:	4413      	add	r3, r2
 8000998:	b29b      	uxth	r3, r3
 800099a:	7dfa      	ldrb	r2, [r7, #23]
 800099c:	b292      	uxth	r2, r2
 800099e:	fb02 f303 	mul.w	r3, r2, r3
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	89fb      	ldrh	r3, [r7, #14]
 80009a6:	4413      	add	r3, r2
 80009a8:	b298      	uxth	r0, r3
 80009aa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80009ac:	89b9      	ldrh	r1, [r7, #12]
 80009ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	4613      	mov	r3, r2
 80009b4:	2230      	movs	r2, #48	@ 0x30
 80009b6:	f7ff feaf 	bl	8000718 <EPD_ShowChar>
 80009ba:	e019      	b.n	80009f0 <EPD_ShowNum+0xc8>
    }
    else
    {
      EPD_ShowChar(x + (size1 / 2 + m) * t, y, temp + '0', size1, color);
 80009bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80009be:	085b      	lsrs	r3, r3, #1
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	461a      	mov	r2, r3
 80009c4:	7dbb      	ldrb	r3, [r7, #22]
 80009c6:	4413      	add	r3, r2
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	7dfa      	ldrb	r2, [r7, #23]
 80009cc:	b292      	uxth	r2, r2
 80009ce:	fb02 f303 	mul.w	r3, r2, r3
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	89fb      	ldrh	r3, [r7, #14]
 80009d6:	4413      	add	r3, r2
 80009d8:	b298      	uxth	r0, r3
 80009da:	7d7b      	ldrb	r3, [r7, #21]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	3330      	adds	r3, #48	@ 0x30
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 80009e4:	89b9      	ldrh	r1, [r7, #12]
 80009e6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	4623      	mov	r3, r4
 80009ec:	f7ff fe94 	bl	8000718 <EPD_ShowChar>
  for (t = 0; t < len; t++)
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
 80009f2:	3301      	adds	r3, #1
 80009f4:	75fb      	strb	r3, [r7, #23]
 80009f6:	7dfb      	ldrb	r3, [r7, #23]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	88fa      	ldrh	r2, [r7, #6]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d8a8      	bhi.n	8000952 <EPD_ShowNum+0x2a>
    }
  }
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	371c      	adds	r7, #28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	cccccccd 	.word	0xcccccccd

08000a10 <EPD_ShowChinese>:
// 显示汉字
// x,y:起点坐标
// num:汉字对应的序号
// mode:0,反色显示;1,正常显示
void EPD_ShowChinese(uint16_t x, uint16_t y, uint16_t num, uint16_t size1, uint16_t color)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b087      	sub	sp, #28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4604      	mov	r4, r0
 8000a18:	4608      	mov	r0, r1
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4623      	mov	r3, r4
 8000a20:	80fb      	strh	r3, [r7, #6]
 8000a22:	4603      	mov	r3, r0
 8000a24:	80bb      	strh	r3, [r7, #4]
 8000a26:	460b      	mov	r3, r1
 8000a28:	807b      	strh	r3, [r7, #2]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	803b      	strh	r3, [r7, #0]
  uint16_t m, temp;
  uint16_t x0, y0;
  uint16_t i, size3 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * size1; // 得到字体一个字符对应点阵集所占的字节数
 8000a2e:	883b      	ldrh	r3, [r7, #0]
 8000a30:	08db      	lsrs	r3, r3, #3
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	461a      	mov	r2, r3
 8000a36:	883b      	ldrh	r3, [r7, #0]
 8000a38:	f003 0307 	and.w	r3, r3, #7
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bf14      	ite	ne
 8000a42:	2301      	movne	r3, #1
 8000a44:	2300      	moveq	r3, #0
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	4413      	add	r3, r2
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	883a      	ldrh	r2, [r7, #0]
 8000a4e:	fb02 f303 	mul.w	r3, r2, r3
 8000a52:	81fb      	strh	r3, [r7, #14]
  x += 1, y += 1, x0 = x, y0 = y;
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	3301      	adds	r3, #1
 8000a58:	80fb      	strh	r3, [r7, #6]
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	80bb      	strh	r3, [r7, #4]
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	81bb      	strh	r3, [r7, #12]
 8000a64:	88bb      	ldrh	r3, [r7, #4]
 8000a66:	827b      	strh	r3, [r7, #18]
  for (i = 0; i < size3; i++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	823b      	strh	r3, [r7, #16]
 8000a6c:	e06b      	b.n	8000b46 <EPD_ShowChinese+0x136>
  {
    if (size1 == 16)
 8000a6e:	883b      	ldrh	r3, [r7, #0]
 8000a70:	2b10      	cmp	r3, #16
 8000a72:	d108      	bne.n	8000a86 <EPD_ShowChinese+0x76>
    {
      temp = Hzk1[num][i];
 8000a74:	887a      	ldrh	r2, [r7, #2]
 8000a76:	8a3b      	ldrh	r3, [r7, #16]
 8000a78:	4937      	ldr	r1, [pc, #220]	@ (8000b58 <EPD_ShowChinese+0x148>)
 8000a7a:	0152      	lsls	r2, r2, #5
 8000a7c:	440a      	add	r2, r1
 8000a7e:	4413      	add	r3, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	82bb      	strh	r3, [r7, #20]
 8000a84:	e025      	b.n	8000ad2 <EPD_ShowChinese+0xc2>
    } // 调用16*16字体
    else if (size1 == 24)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	2b18      	cmp	r3, #24
 8000a8a:	d10b      	bne.n	8000aa4 <EPD_ShowChinese+0x94>
    {
      temp = Hzk2[num][i];
 8000a8c:	887a      	ldrh	r2, [r7, #2]
 8000a8e:	8a39      	ldrh	r1, [r7, #16]
 8000a90:	4832      	ldr	r0, [pc, #200]	@ (8000b5c <EPD_ShowChinese+0x14c>)
 8000a92:	4613      	mov	r3, r2
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	4413      	add	r3, r2
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	4403      	add	r3, r0
 8000a9c:	440b      	add	r3, r1
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	82bb      	strh	r3, [r7, #20]
 8000aa2:	e016      	b.n	8000ad2 <EPD_ShowChinese+0xc2>
    } // 调用24*24字体
    else if (size1 == 32)
 8000aa4:	883b      	ldrh	r3, [r7, #0]
 8000aa6:	2b20      	cmp	r3, #32
 8000aa8:	d108      	bne.n	8000abc <EPD_ShowChinese+0xac>
    {
      temp = Hzk3[num][i];
 8000aaa:	887a      	ldrh	r2, [r7, #2]
 8000aac:	8a3b      	ldrh	r3, [r7, #16]
 8000aae:	492c      	ldr	r1, [pc, #176]	@ (8000b60 <EPD_ShowChinese+0x150>)
 8000ab0:	01d2      	lsls	r2, r2, #7
 8000ab2:	440a      	add	r2, r1
 8000ab4:	4413      	add	r3, r2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	82bb      	strh	r3, [r7, #20]
 8000aba:	e00a      	b.n	8000ad2 <EPD_ShowChinese+0xc2>
    } // 调用32*32字体
    else if (size1 == 64)
 8000abc:	883b      	ldrh	r3, [r7, #0]
 8000abe:	2b40      	cmp	r3, #64	@ 0x40
 8000ac0:	d146      	bne.n	8000b50 <EPD_ShowChinese+0x140>
    {
      temp = Hzk4[num][i];
 8000ac2:	887a      	ldrh	r2, [r7, #2]
 8000ac4:	8a3b      	ldrh	r3, [r7, #16]
 8000ac6:	4927      	ldr	r1, [pc, #156]	@ (8000b64 <EPD_ShowChinese+0x154>)
 8000ac8:	0252      	lsls	r2, r2, #9
 8000aca:	440a      	add	r2, r1
 8000acc:	4413      	add	r3, r2
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	82bb      	strh	r3, [r7, #20]
    } // 调用64*64字体
    else
      return;
    for (m = 0; m < 8; m++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	82fb      	strh	r3, [r7, #22]
 8000ad6:	e020      	b.n	8000b1a <EPD_ShowChinese+0x10a>
    {
      if (temp & 0x01)
 8000ad8:	8abb      	ldrh	r3, [r7, #20]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d006      	beq.n	8000af0 <EPD_ShowChinese+0xe0>
        EPD_DrawPoint(x, y, color);
 8000ae2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000ae4:	88b9      	ldrh	r1, [r7, #4]
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fd5d 	bl	80005a8 <EPD_DrawPoint>
 8000aee:	e00b      	b.n	8000b08 <EPD_ShowChinese+0xf8>
      else
        EPD_DrawPoint(x, y, !color);
 8000af0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bf0c      	ite	eq
 8000af6:	2301      	moveq	r3, #1
 8000af8:	2300      	movne	r3, #0
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	88b9      	ldrh	r1, [r7, #4]
 8000b00:	88fb      	ldrh	r3, [r7, #6]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fd50 	bl	80005a8 <EPD_DrawPoint>
      temp >>= 1;
 8000b08:	8abb      	ldrh	r3, [r7, #20]
 8000b0a:	085b      	lsrs	r3, r3, #1
 8000b0c:	82bb      	strh	r3, [r7, #20]
      y++;
 8000b0e:	88bb      	ldrh	r3, [r7, #4]
 8000b10:	3301      	adds	r3, #1
 8000b12:	80bb      	strh	r3, [r7, #4]
    for (m = 0; m < 8; m++)
 8000b14:	8afb      	ldrh	r3, [r7, #22]
 8000b16:	3301      	adds	r3, #1
 8000b18:	82fb      	strh	r3, [r7, #22]
 8000b1a:	8afb      	ldrh	r3, [r7, #22]
 8000b1c:	2b07      	cmp	r3, #7
 8000b1e:	d9db      	bls.n	8000ad8 <EPD_ShowChinese+0xc8>
    }
    x++;
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	3301      	adds	r3, #1
 8000b24:	80fb      	strh	r3, [r7, #6]
    if ((x - x0) == size1)
 8000b26:	88fa      	ldrh	r2, [r7, #6]
 8000b28:	89bb      	ldrh	r3, [r7, #12]
 8000b2a:	1ad2      	subs	r2, r2, r3
 8000b2c:	883b      	ldrh	r3, [r7, #0]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d104      	bne.n	8000b3c <EPD_ShowChinese+0x12c>
    {
      x = x0;
 8000b32:	89bb      	ldrh	r3, [r7, #12]
 8000b34:	80fb      	strh	r3, [r7, #6]
      y0 = y0 + 8;
 8000b36:	8a7b      	ldrh	r3, [r7, #18]
 8000b38:	3308      	adds	r3, #8
 8000b3a:	827b      	strh	r3, [r7, #18]
    }
    y = y0;
 8000b3c:	8a7b      	ldrh	r3, [r7, #18]
 8000b3e:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < size3; i++)
 8000b40:	8a3b      	ldrh	r3, [r7, #16]
 8000b42:	3301      	adds	r3, #1
 8000b44:	823b      	strh	r3, [r7, #16]
 8000b46:	8a3a      	ldrh	r2, [r7, #16]
 8000b48:	89fb      	ldrh	r3, [r7, #14]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d38f      	bcc.n	8000a6e <EPD_ShowChinese+0x5e>
 8000b4e:	e000      	b.n	8000b52 <EPD_ShowChinese+0x142>
      return;
 8000b50:	bf00      	nop
  }
}
 8000b52:	371c      	adds	r7, #28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	08004840 	.word	0x08004840
 8000b5c:	080049a0 	.word	0x080049a0
 8000b60:	080049e8 	.word	0x080049e8
 8000b64:	08004a68 	.word	0x08004a68

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6c:	f000 fb62 	bl	8001234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b70:	f000 f810 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b74:	f000 f90e 	bl	8000d94 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b78:	f000 f848 	bl	8000c0c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b7c:	f000 f8bc 	bl	8000cf8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

//	sing(&summer_wind_in_the_forest);
  HAL_TIM_Base_Start_IT(&htim3);
 8000b80:	4803      	ldr	r0, [pc, #12]	@ (8000b90 <main+0x28>)
 8000b82:	f001 faa9 	bl	80020d8 <HAL_TIM_Base_Start_IT>
  EPD_demo();
 8000b86:	f000 f95f 	bl	8000e48 <EPD_demo>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000b8a:	bf00      	nop
 8000b8c:	e7fd      	b.n	8000b8a <main+0x22>
 8000b8e:	bf00      	nop
 8000b90:	20000084 	.word	0x20000084

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b090      	sub	sp, #64	@ 0x40
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0318 	add.w	r3, r7, #24
 8000b9e:	2228      	movs	r2, #40	@ 0x28
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 f8dc 	bl	8002d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbe:	2310      	movs	r3, #16
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc6:	f107 0318 	add.w	r3, r7, #24
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fe56 	bl	800187c <HAL_RCC_OscConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bd6:	f000 fa19 	bl	800100c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bda:	230f      	movs	r3, #15
 8000bdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 f8c4 	bl	8001d80 <HAL_RCC_ClockConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bfe:	f000 fa05 	bl	800100c <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3740      	adds	r7, #64	@ 0x40
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08e      	sub	sp, #56	@ 0x38
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c20:	f107 0320 	add.w	r3, r7, #32
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	615a      	str	r2, [r3, #20]
 8000c3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000c44:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c46:	2207      	movs	r2, #7
 8000c48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3823;
 8000c50:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c52:	f640 62ef 	movw	r2, #3823	@ 0xeef
 8000c56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000c58:	4b26      	ldr	r3, [pc, #152]	@ (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c60:	4b24      	ldr	r3, [pc, #144]	@ (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c62:	2280      	movs	r2, #128	@ 0x80
 8000c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c66:	4823      	ldr	r0, [pc, #140]	@ (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c68:	f001 f9e6 	bl	8002038 <HAL_TIM_Base_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c72:	f000 f9cb 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c80:	4619      	mov	r1, r3
 8000c82:	481c      	ldr	r0, [pc, #112]	@ (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c84:	f001 fc84 	bl	8002590 <HAL_TIM_ConfigClockSource>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c8e:	f000 f9bd 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c92:	4818      	ldr	r0, [pc, #96]	@ (8000cf4 <MX_TIM2_Init+0xe8>)
 8000c94:	f001 fa72 	bl	800217c <HAL_TIM_PWM_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c9e:	f000 f9b5 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000caa:	f107 0320 	add.w	r3, r7, #32
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4810      	ldr	r0, [pc, #64]	@ (8000cf4 <MX_TIM2_Init+0xe8>)
 8000cb2:	f001 ffe5 	bl	8002c80 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000cbc:	f000 f9a6 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc0:	2360      	movs	r3, #96	@ 0x60
 8000cc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4807      	ldr	r0, [pc, #28]	@ (8000cf4 <MX_TIM2_Init+0xe8>)
 8000cd8:	f001 fb98 	bl	800240c <HAL_TIM_PWM_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ce2:	f000 f993 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ce6:	4803      	ldr	r0, [pc, #12]	@ (8000cf4 <MX_TIM2_Init+0xe8>)
 8000ce8:	f000 fa08 	bl	80010fc <HAL_TIM_MspPostInit>

}
 8000cec:	bf00      	nop
 8000cee:	3738      	adds	r7, #56	@ 0x38
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000003c 	.word	0x2000003c

08000cf8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <MX_TIM3_Init+0x94>)
 8000d16:	4a1e      	ldr	r2, [pc, #120]	@ (8000d90 <MX_TIM3_Init+0x98>)
 8000d18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <MX_TIM3_Init+0x94>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <MX_TIM3_Init+0x94>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d26:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <MX_TIM3_Init+0x94>)
 8000d28:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <MX_TIM3_Init+0x94>)
 8000d30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <MX_TIM3_Init+0x94>)
 8000d38:	2280      	movs	r2, #128	@ 0x80
 8000d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d3c:	4813      	ldr	r0, [pc, #76]	@ (8000d8c <MX_TIM3_Init+0x94>)
 8000d3e:	f001 f97b 	bl	8002038 <HAL_TIM_Base_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d48:	f000 f960 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	4619      	mov	r1, r3
 8000d58:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <MX_TIM3_Init+0x94>)
 8000d5a:	f001 fc19 	bl	8002590 <HAL_TIM_ConfigClockSource>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d64:	f000 f952 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_TIM3_Init+0x94>)
 8000d76:	f001 ff83 	bl	8002c80 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d80:	f000 f944 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000084 	.word	0x20000084
 8000d90:	40000400 	.word	0x40000400

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <MX_GPIO_Init+0x28>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	4a07      	ldr	r2, [pc, #28]	@ (8000dbc <MX_GPIO_Init+0x28>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6193      	str	r3, [r2, #24]
 8000da6:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <MX_GPIO_Init+0x28>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	if (&htim3 == htim) {
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d111      	bne.n	8000df4 <HAL_TIM_PeriodElapsedCallback+0x34>
		if (singing) {
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d004      	beq.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0x22>
			count--;
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000de0:	6013      	str	r3, [r2, #0]
		}
		if (delaying){
 8000de2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d004      	beq.n	8000df4 <HAL_TIM_PeriodElapsedCallback+0x34>
			delay_count--;
 8000dea:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	4a07      	ldr	r2, [pc, #28]	@ (8000e10 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000df2:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000084 	.word	0x20000084
 8000e04:	200000d0 	.word	0x200000d0
 8000e08:	200000cc 	.word	0x200000cc
 8000e0c:	200000d4 	.word	0x200000d4
 8000e10:	200000d8 	.word	0x200000d8

08000e14 <delay_ms>:
	}
	HAL_TIM_MspPostInit(&htim2);

}

void delay_ms(int ms){
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	delay_count = ms;
 8000e1c:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <delay_ms+0x2c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
	delaying = 1;
 8000e22:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <delay_ms+0x30>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	601a      	str	r2, [r3, #0]
	while(delay_count>=0){}
 8000e28:	bf00      	nop
 8000e2a:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <delay_ms+0x2c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	dafb      	bge.n	8000e2a <delay_ms+0x16>
}
 8000e32:	bf00      	nop
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200000d8 	.word	0x200000d8
 8000e44:	200000d4 	.word	0x200000d4

08000e48 <EPD_demo>:
}

uint8_t Image_BW[4736];

int EPD_demo()
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af02      	add	r7, sp, #8
	uint8_t t = ' ';
 8000e4e:	2320      	movs	r3, #32
 8000e50:	71fb      	strb	r3, [r7, #7]
	int c = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
	EPD_GUIInit();
 8000e56:	f7ff fa35 	bl	80002c4 <EPD_GUIInit>
	Paint_NewImage(Image_BW, EPD_W, EPD_H, 0, WHITE);
 8000e5a:	23ff      	movs	r3, #255	@ 0xff
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8000e64:	2180      	movs	r1, #128	@ 0x80
 8000e66:	4861      	ldr	r0, [pc, #388]	@ (8000fec <EPD_demo+0x1a4>)
 8000e68:	f7ff fa9a 	bl	80003a0 <Paint_NewImage>
	EPD_Clear(WHITE);
 8000e6c:	20ff      	movs	r0, #255	@ 0xff
 8000e6e:	f7ff fb69 	bl	8000544 <EPD_Clear>
//		EPD_Display(Image_BW);
//		delay_ms(1000);
//		delay_ms(1000);
//		delay_ms(1000);
//		EPD_Clear(WHITE);
		EPD_GUIInit();
 8000e72:	f7ff fa27 	bl	80002c4 <EPD_GUIInit>
		EPD_ShowChinese(61, 0, 0, 16, BLACK);	// 中
 8000e76:	2300      	movs	r3, #0
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2310      	movs	r3, #16
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	203d      	movs	r0, #61	@ 0x3d
 8000e82:	f7ff fdc5 	bl	8000a10 <EPD_ShowChinese>
		EPD_ShowChinese(77, 0, 1, 16, BLACK);	// 景
 8000e86:	2300      	movs	r3, #0
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2310      	movs	r3, #16
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2100      	movs	r1, #0
 8000e90:	204d      	movs	r0, #77	@ 0x4d
 8000e92:	f7ff fdbd 	bl	8000a10 <EPD_ShowChinese>
		EPD_ShowChinese(93, 0, 2, 16, BLACK);	// 园
 8000e96:	2300      	movs	r3, #0
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2310      	movs	r3, #16
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	205d      	movs	r0, #93	@ 0x5d
 8000ea2:	f7ff fdb5 	bl	8000a10 <EPD_ShowChinese>
		EPD_ShowChinese(109, 0, 3, 16, BLACK);	// 电
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2310      	movs	r3, #16
 8000eac:	2203      	movs	r2, #3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	206d      	movs	r0, #109	@ 0x6d
 8000eb2:	f7ff fdad 	bl	8000a10 <EPD_ShowChinese>
		EPD_ShowChinese(125, 0, 4, 16, BLACK);	// 子
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2310      	movs	r3, #16
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	207d      	movs	r0, #125	@ 0x7d
 8000ec2:	f7ff fda5 	bl	8000a10 <EPD_ShowChinese>
		EPD_ShowChinese(141, 0, 5, 16, BLACK);	// 技
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2310      	movs	r3, #16
 8000ecc:	2205      	movs	r2, #5
 8000ece:	2100      	movs	r1, #0
 8000ed0:	208d      	movs	r0, #141	@ 0x8d
 8000ed2:	f7ff fd9d 	bl	8000a10 <EPD_ShowChinese>
		EPD_ShowChinese(157, 0, 6, 16, BLACK);	// 术
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2310      	movs	r3, #16
 8000edc:	2206      	movs	r2, #6
 8000ede:	2100      	movs	r1, #0
 8000ee0:	209d      	movs	r0, #157	@ 0x9d
 8000ee2:	f7ff fd95 	bl	8000a10 <EPD_ShowChinese>
		EPD_ShowChinese(173, 0, 7, 16, BLACK);	// 有
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2310      	movs	r3, #16
 8000eec:	2207      	movs	r2, #7
 8000eee:	2100      	movs	r1, #0
 8000ef0:	20ad      	movs	r0, #173	@ 0xad
 8000ef2:	f7ff fd8d 	bl	8000a10 <EPD_ShowChinese>
		EPD_ShowChinese(189, 0, 8, 16, BLACK);	// 限
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2310      	movs	r3, #16
 8000efc:	2208      	movs	r2, #8
 8000efe:	2100      	movs	r1, #0
 8000f00:	20bd      	movs	r0, #189	@ 0xbd
 8000f02:	f7ff fd85 	bl	8000a10 <EPD_ShowChinese>
		EPD_ShowChinese(205, 0, 9, 16, BLACK);	// 公
 8000f06:	2300      	movs	r3, #0
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	2209      	movs	r2, #9
 8000f0e:	2100      	movs	r1, #0
 8000f10:	20cd      	movs	r0, #205	@ 0xcd
 8000f12:	f7ff fd7d 	bl	8000a10 <EPD_ShowChinese>
		EPD_ShowChinese(221, 0, 10, 16, BLACK); // 司
 8000f16:	2300      	movs	r3, #0
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	220a      	movs	r2, #10
 8000f1e:	2100      	movs	r1, #0
 8000f20:	20dd      	movs	r0, #221	@ 0xdd
 8000f22:	f7ff fd75 	bl	8000a10 <EPD_ShowChinese>
		EPD_ShowString(108, 20, "2014/05/01", 16, BLACK);
 8000f26:	2300      	movs	r3, #0
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	4a30      	ldr	r2, [pc, #192]	@ (8000ff0 <EPD_demo+0x1a8>)
 8000f2e:	2114      	movs	r1, #20
 8000f30:	206c      	movs	r0, #108	@ 0x6c
 8000f32:	f7ff fcb3 	bl	800089c <EPD_ShowString>
		EPD_ShowString(80, 40, "ASCII:", 16, BLACK);
 8000f36:	2300      	movs	r3, #0
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ff4 <EPD_demo+0x1ac>)
 8000f3e:	2128      	movs	r1, #40	@ 0x28
 8000f40:	2050      	movs	r0, #80	@ 0x50
 8000f42:	f7ff fcab 	bl	800089c <EPD_ShowString>
		EPD_ShowString(157, 40, "CODE:", 16, BLACK);
 8000f46:	2300      	movs	r3, #0
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	4a2a      	ldr	r2, [pc, #168]	@ (8000ff8 <EPD_demo+0x1b0>)
 8000f4e:	2128      	movs	r1, #40	@ 0x28
 8000f50:	209d      	movs	r0, #157	@ 0x9d
 8000f52:	f7ff fca3 	bl	800089c <EPD_ShowString>
		EPD_ShowChar(131, 40, t, 16, BLACK);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2310      	movs	r3, #16
 8000f60:	2128      	movs	r1, #40	@ 0x28
 8000f62:	2083      	movs	r0, #131	@ 0x83
 8000f64:	f7ff fbd8 	bl	8000718 <EPD_ShowChar>
		EPD_ShowNum(198, 40, t, 3, 16, BLACK);
 8000f68:	79fa      	ldrb	r2, [r7, #7]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	2310      	movs	r3, #16
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2303      	movs	r3, #3
 8000f74:	2128      	movs	r1, #40	@ 0x28
 8000f76:	20c6      	movs	r0, #198	@ 0xc6
 8000f78:	f7ff fcd6 	bl	8000928 <EPD_ShowNum>
//		c++;
//		if (c%10==0)
			t++;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	71fb      	strb	r3, [r7, #7]
		if (t > '~')
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b7e      	cmp	r3, #126	@ 0x7e
 8000f86:	d901      	bls.n	8000f8c <EPD_demo+0x144>
			t = ' ';
 8000f88:	2320      	movs	r3, #32
 8000f8a:	71fb      	strb	r3, [r7, #7]
		EPD_ShowString(33, 56, "Welcome to 2.90-inch E-paper", 16, BLACK);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2310      	movs	r3, #16
 8000f92:	4a1a      	ldr	r2, [pc, #104]	@ (8000ffc <EPD_demo+0x1b4>)
 8000f94:	2138      	movs	r1, #56	@ 0x38
 8000f96:	2021      	movs	r0, #33	@ 0x21
 8000f98:	f7ff fc80 	bl	800089c <EPD_ShowString>
		EPD_ShowString(49, 73, "with 296 x 128 resolution", 16, BLACK);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	4a17      	ldr	r2, [pc, #92]	@ (8001000 <EPD_demo+0x1b8>)
 8000fa4:	2149      	movs	r1, #73	@ 0x49
 8000fa6:	2031      	movs	r0, #49	@ 0x31
 8000fa8:	f7ff fc78 	bl	800089c <EPD_ShowString>
		EPD_DrawLine(1, 89, 296, 89, BLACK);
 8000fac:	2300      	movs	r3, #0
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2359      	movs	r3, #89	@ 0x59
 8000fb2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8000fb6:	2159      	movs	r1, #89	@ 0x59
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff fb3e 	bl	800063a <EPD_DrawLine>
		EPD_ShowString(53, 90, "Zhongjingyuan Electronic", 16, BLACK);
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	4a0f      	ldr	r2, [pc, #60]	@ (8001004 <EPD_demo+0x1bc>)
 8000fc6:	215a      	movs	r1, #90	@ 0x5a
 8000fc8:	2035      	movs	r0, #53	@ 0x35
 8000fca:	f7ff fc67 	bl	800089c <EPD_ShowString>
		EPD_ShowString(75, 106, "Technology Co.,Ltd.", 16, BLACK);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2310      	movs	r3, #16
 8000fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001008 <EPD_demo+0x1c0>)
 8000fd6:	216a      	movs	r1, #106	@ 0x6a
 8000fd8:	204b      	movs	r0, #75	@ 0x4b
 8000fda:	f7ff fc5f 	bl	800089c <EPD_ShowString>
		EPD_Display(Image_BW);
 8000fde:	4803      	ldr	r0, [pc, #12]	@ (8000fec <EPD_demo+0x1a4>)
 8000fe0:	f7ff faf9 	bl	80005d6 <EPD_Display>
//		EPD_DrawRectangle(1, 1, 296, 128, BLACK, 0);
//		EPD_Display(Image_BW);
//		delay_ms(1000);
//		delay_ms(1000);
//		delay_ms(1000);
		EPD_Clear(WHITE);
 8000fe4:	20ff      	movs	r0, #255	@ 0xff
 8000fe6:	f7ff faad 	bl	8000544 <EPD_Clear>
		EPD_GUIInit();
 8000fea:	e742      	b.n	8000e72 <EPD_demo+0x2a>
 8000fec:	200000dc 	.word	0x200000dc
 8000ff0:	08002dd0 	.word	0x08002dd0
 8000ff4:	08002ddc 	.word	0x08002ddc
 8000ff8:	08002de4 	.word	0x08002de4
 8000ffc:	08002dec 	.word	0x08002dec
 8001000:	08002e0c 	.word	0x08002e0c
 8001004:	08002e28 	.word	0x08002e28
 8001008:	08002e44 	.word	0x08002e44

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <Error_Handler+0x8>

08001018 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_MspInit+0x5c>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	4a14      	ldr	r2, [pc, #80]	@ (8001074 <HAL_MspInit+0x5c>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6193      	str	r3, [r2, #24]
 800102a:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HAL_MspInit+0x5c>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <HAL_MspInit+0x5c>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a0e      	ldr	r2, [pc, #56]	@ (8001074 <HAL_MspInit+0x5c>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <HAL_MspInit+0x5c>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <HAL_MspInit+0x60>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_MspInit+0x60>)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000

0800107c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800108c:	d114      	bne.n	80010b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800108e:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <HAL_TIM_Base_MspInit+0x78>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	4a18      	ldr	r2, [pc, #96]	@ (80010f4 <HAL_TIM_Base_MspInit+0x78>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	61d3      	str	r3, [r2, #28]
 800109a:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <HAL_TIM_Base_MspInit+0x78>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	201c      	movs	r0, #28
 80010ac:	f000 f9fb 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010b0:	201c      	movs	r0, #28
 80010b2:	f000 fa14 	bl	80014de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010b6:	e018      	b.n	80010ea <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0e      	ldr	r2, [pc, #56]	@ (80010f8 <HAL_TIM_Base_MspInit+0x7c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d113      	bne.n	80010ea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <HAL_TIM_Base_MspInit+0x78>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <HAL_TIM_Base_MspInit+0x78>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	61d3      	str	r3, [r2, #28]
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <HAL_TIM_Base_MspInit+0x78>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	201d      	movs	r0, #29
 80010e0:	f000 f9e1 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010e4:	201d      	movs	r0, #29
 80010e6:	f000 f9fa 	bl	80014de <HAL_NVIC_EnableIRQ>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40000400 	.word	0x40000400

080010fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800111a:	d117      	bne.n	800114c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <HAL_TIM_MspPostInit+0x58>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a0c      	ldr	r2, [pc, #48]	@ (8001154 <HAL_TIM_MspPostInit+0x58>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <HAL_TIM_MspPostInit+0x58>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001134:	2301      	movs	r3, #1
 8001136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2302      	movs	r3, #2
 800113e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4619      	mov	r1, r3
 8001146:	4804      	ldr	r0, [pc, #16]	@ (8001158 <HAL_TIM_MspPostInit+0x5c>)
 8001148:	f000 f9e4 	bl	8001514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40021000 	.word	0x40021000
 8001158:	40010800 	.word	0x40010800

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <NMI_Handler+0x4>

08001164 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <MemManage_Handler+0x4>

08001174 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <UsageFault_Handler+0x4>

08001184 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ac:	f000 f888 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <TIM2_IRQHandler+0x10>)
 80011ba:	f001 f837 	bl	800222c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000003c 	.word	0x2000003c

080011c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011cc:	4802      	ldr	r0, [pc, #8]	@ (80011d8 <TIM3_IRQHandler+0x10>)
 80011ce:	f001 f82d 	bl	800222c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000084 	.word	0x20000084

080011dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e8:	f7ff fff8 	bl	80011dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480b      	ldr	r0, [pc, #44]	@ (800121c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011ee:	490c      	ldr	r1, [pc, #48]	@ (8001220 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001224 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a09      	ldr	r2, [pc, #36]	@ (8001228 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001204:	4c09      	ldr	r4, [pc, #36]	@ (800122c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001212:	f001 fdad 	bl	8002d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001216:	f7ff fca7 	bl	8000b68 <main>
  bx lr
 800121a:	4770      	bx	lr
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001224:	08004c94 	.word	0x08004c94
  ldr r2, =_sbss
 8001228:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800122c:	20001360 	.word	0x20001360

08001230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC1_2_IRQHandler>
	...

08001234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HAL_Init+0x28>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	@ (800125c <HAL_Init+0x28>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f923 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	200f      	movs	r0, #15
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fee2 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40022000 	.word	0x40022000

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f93b 	bl	80014fa <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f903 	bl	80014a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	@ (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <HAL_IncTick+0x1c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_IncTick+0x20>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a03      	ldr	r2, [pc, #12]	@ (80012e0 <HAL_IncTick+0x20>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	20000008 	.word	0x20000008
 80012e0:	2000135c 	.word	0x2000135c

080012e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b02      	ldr	r3, [pc, #8]	@ (80012f4 <HAL_GetTick+0x10>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	2000135c 	.word	0x2000135c

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4906      	ldr	r1, [pc, #24]	@ (8001390 <__NVIC_EnableIRQ+0x34>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	@ (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	@ (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	@ 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	@ 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f7ff ff90 	bl	8001394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	@ (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff2d 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b8:	f7ff ff42 	bl	8001340 <__NVIC_GetPriorityGrouping>
 80014bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	6978      	ldr	r0, [r7, #20]
 80014c4:	f7ff ff90 	bl	80013e8 <NVIC_EncodePriority>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff5f 	bl	8001394 <__NVIC_SetPriority>
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff35 	bl	800135c <__NVIC_EnableIRQ>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ffa2 	bl	800144c <SysTick_Config>
 8001508:	4603      	mov	r3, r0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b08b      	sub	sp, #44	@ 0x2c
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001526:	e169      	b.n	80017fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001528:	2201      	movs	r2, #1
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	429a      	cmp	r2, r3
 8001542:	f040 8158 	bne.w	80017f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4a9a      	ldr	r2, [pc, #616]	@ (80017b4 <HAL_GPIO_Init+0x2a0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d05e      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001550:	4a98      	ldr	r2, [pc, #608]	@ (80017b4 <HAL_GPIO_Init+0x2a0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d875      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 8001556:	4a98      	ldr	r2, [pc, #608]	@ (80017b8 <HAL_GPIO_Init+0x2a4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d058      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 800155c:	4a96      	ldr	r2, [pc, #600]	@ (80017b8 <HAL_GPIO_Init+0x2a4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d86f      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 8001562:	4a96      	ldr	r2, [pc, #600]	@ (80017bc <HAL_GPIO_Init+0x2a8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d052      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001568:	4a94      	ldr	r2, [pc, #592]	@ (80017bc <HAL_GPIO_Init+0x2a8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d869      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 800156e:	4a94      	ldr	r2, [pc, #592]	@ (80017c0 <HAL_GPIO_Init+0x2ac>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d04c      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001574:	4a92      	ldr	r2, [pc, #584]	@ (80017c0 <HAL_GPIO_Init+0x2ac>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d863      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 800157a:	4a92      	ldr	r2, [pc, #584]	@ (80017c4 <HAL_GPIO_Init+0x2b0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d046      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001580:	4a90      	ldr	r2, [pc, #576]	@ (80017c4 <HAL_GPIO_Init+0x2b0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d85d      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 8001586:	2b12      	cmp	r3, #18
 8001588:	d82a      	bhi.n	80015e0 <HAL_GPIO_Init+0xcc>
 800158a:	2b12      	cmp	r3, #18
 800158c:	d859      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 800158e:	a201      	add	r2, pc, #4	@ (adr r2, 8001594 <HAL_GPIO_Init+0x80>)
 8001590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001594:	0800160f 	.word	0x0800160f
 8001598:	080015e9 	.word	0x080015e9
 800159c:	080015fb 	.word	0x080015fb
 80015a0:	0800163d 	.word	0x0800163d
 80015a4:	08001643 	.word	0x08001643
 80015a8:	08001643 	.word	0x08001643
 80015ac:	08001643 	.word	0x08001643
 80015b0:	08001643 	.word	0x08001643
 80015b4:	08001643 	.word	0x08001643
 80015b8:	08001643 	.word	0x08001643
 80015bc:	08001643 	.word	0x08001643
 80015c0:	08001643 	.word	0x08001643
 80015c4:	08001643 	.word	0x08001643
 80015c8:	08001643 	.word	0x08001643
 80015cc:	08001643 	.word	0x08001643
 80015d0:	08001643 	.word	0x08001643
 80015d4:	08001643 	.word	0x08001643
 80015d8:	080015f1 	.word	0x080015f1
 80015dc:	08001605 	.word	0x08001605
 80015e0:	4a79      	ldr	r2, [pc, #484]	@ (80017c8 <HAL_GPIO_Init+0x2b4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015e6:	e02c      	b.n	8001642 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	623b      	str	r3, [r7, #32]
          break;
 80015ee:	e029      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	3304      	adds	r3, #4
 80015f6:	623b      	str	r3, [r7, #32]
          break;
 80015f8:	e024      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	3308      	adds	r3, #8
 8001600:	623b      	str	r3, [r7, #32]
          break;
 8001602:	e01f      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	330c      	adds	r3, #12
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e01a      	b.n	8001644 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001616:	2304      	movs	r3, #4
 8001618:	623b      	str	r3, [r7, #32]
          break;
 800161a:	e013      	b.n	8001644 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d105      	bne.n	8001630 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001624:	2308      	movs	r3, #8
 8001626:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	611a      	str	r2, [r3, #16]
          break;
 800162e:	e009      	b.n	8001644 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001630:	2308      	movs	r3, #8
 8001632:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	615a      	str	r2, [r3, #20]
          break;
 800163a:	e003      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
          break;
 8001640:	e000      	b.n	8001644 <HAL_GPIO_Init+0x130>
          break;
 8001642:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2bff      	cmp	r3, #255	@ 0xff
 8001648:	d801      	bhi.n	800164e <HAL_GPIO_Init+0x13a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	e001      	b.n	8001652 <HAL_GPIO_Init+0x13e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3304      	adds	r3, #4
 8001652:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2bff      	cmp	r3, #255	@ 0xff
 8001658:	d802      	bhi.n	8001660 <HAL_GPIO_Init+0x14c>
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	e002      	b.n	8001666 <HAL_GPIO_Init+0x152>
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	3b08      	subs	r3, #8
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	210f      	movs	r1, #15
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	401a      	ands	r2, r3
 8001678:	6a39      	ldr	r1, [r7, #32]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	431a      	orrs	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80b1 	beq.w	80017f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001694:	4b4d      	ldr	r3, [pc, #308]	@ (80017cc <HAL_GPIO_Init+0x2b8>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	4a4c      	ldr	r2, [pc, #304]	@ (80017cc <HAL_GPIO_Init+0x2b8>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6193      	str	r3, [r2, #24]
 80016a0:	4b4a      	ldr	r3, [pc, #296]	@ (80017cc <HAL_GPIO_Init+0x2b8>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016ac:	4a48      	ldr	r2, [pc, #288]	@ (80017d0 <HAL_GPIO_Init+0x2bc>)
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	220f      	movs	r2, #15
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a40      	ldr	r2, [pc, #256]	@ (80017d4 <HAL_GPIO_Init+0x2c0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d013      	beq.n	8001700 <HAL_GPIO_Init+0x1ec>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a3f      	ldr	r2, [pc, #252]	@ (80017d8 <HAL_GPIO_Init+0x2c4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00d      	beq.n	80016fc <HAL_GPIO_Init+0x1e8>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a3e      	ldr	r2, [pc, #248]	@ (80017dc <HAL_GPIO_Init+0x2c8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d007      	beq.n	80016f8 <HAL_GPIO_Init+0x1e4>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a3d      	ldr	r2, [pc, #244]	@ (80017e0 <HAL_GPIO_Init+0x2cc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d101      	bne.n	80016f4 <HAL_GPIO_Init+0x1e0>
 80016f0:	2303      	movs	r3, #3
 80016f2:	e006      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 80016f4:	2304      	movs	r3, #4
 80016f6:	e004      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 8001700:	2300      	movs	r3, #0
 8001702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001704:	f002 0203 	and.w	r2, r2, #3
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	4093      	lsls	r3, r2
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001712:	492f      	ldr	r1, [pc, #188]	@ (80017d0 <HAL_GPIO_Init+0x2bc>)
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800172c:	4b2d      	ldr	r3, [pc, #180]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	492c      	ldr	r1, [pc, #176]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	608b      	str	r3, [r1, #8]
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800173a:	4b2a      	ldr	r3, [pc, #168]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	43db      	mvns	r3, r3
 8001742:	4928      	ldr	r1, [pc, #160]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001744:	4013      	ands	r3, r2
 8001746:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001754:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	4922      	ldr	r1, [pc, #136]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	60cb      	str	r3, [r1, #12]
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001762:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	43db      	mvns	r3, r3
 800176a:	491e      	ldr	r1, [pc, #120]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 800176c:	4013      	ands	r3, r2
 800176e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d006      	beq.n	800178a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800177c:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4918      	ldr	r1, [pc, #96]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800178a:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	43db      	mvns	r3, r3
 8001792:	4914      	ldr	r1, [pc, #80]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001794:	4013      	ands	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d021      	beq.n	80017e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017a4:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	490e      	ldr	r1, [pc, #56]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]
 80017b0:	e021      	b.n	80017f6 <HAL_GPIO_Init+0x2e2>
 80017b2:	bf00      	nop
 80017b4:	10320000 	.word	0x10320000
 80017b8:	10310000 	.word	0x10310000
 80017bc:	10220000 	.word	0x10220000
 80017c0:	10210000 	.word	0x10210000
 80017c4:	10120000 	.word	0x10120000
 80017c8:	10110000 	.word	0x10110000
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010000 	.word	0x40010000
 80017d4:	40010800 	.word	0x40010800
 80017d8:	40010c00 	.word	0x40010c00
 80017dc:	40011000 	.word	0x40011000
 80017e0:	40011400 	.word	0x40011400
 80017e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <HAL_GPIO_Init+0x304>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	4909      	ldr	r1, [pc, #36]	@ (8001818 <HAL_GPIO_Init+0x304>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	3301      	adds	r3, #1
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001802:	fa22 f303 	lsr.w	r3, r2, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	f47f ae8e 	bne.w	8001528 <HAL_GPIO_Init+0x14>
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	372c      	adds	r7, #44	@ 0x2c
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	40010400 	.word	0x40010400

0800181c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e001      	b.n	800183e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800183e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	807b      	strh	r3, [r7, #2]
 8001856:	4613      	mov	r3, r2
 8001858:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800185a:	787b      	ldrb	r3, [r7, #1]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001860:	887a      	ldrh	r2, [r7, #2]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001866:	e003      	b.n	8001870 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001868:	887b      	ldrh	r3, [r7, #2]
 800186a:	041a      	lsls	r2, r3, #16
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	611a      	str	r2, [r3, #16]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
	...

0800187c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e272      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 8087 	beq.w	80019aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800189c:	4b92      	ldr	r3, [pc, #584]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d00c      	beq.n	80018c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018a8:	4b8f      	ldr	r3, [pc, #572]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d112      	bne.n	80018da <HAL_RCC_OscConfig+0x5e>
 80018b4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c0:	d10b      	bne.n	80018da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c2:	4b89      	ldr	r3, [pc, #548]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d06c      	beq.n	80019a8 <HAL_RCC_OscConfig+0x12c>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d168      	bne.n	80019a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e24c      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x76>
 80018e4:	4b80      	ldr	r3, [pc, #512]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e02e      	b.n	8001950 <HAL_RCC_OscConfig+0xd4>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0x98>
 80018fa:	4b7b      	ldr	r3, [pc, #492]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a7a      	ldr	r2, [pc, #488]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b78      	ldr	r3, [pc, #480]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a77      	ldr	r2, [pc, #476]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800190c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e01d      	b.n	8001950 <HAL_RCC_OscConfig+0xd4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0xbc>
 800191e:	4b72      	ldr	r3, [pc, #456]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a71      	ldr	r2, [pc, #452]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0xd4>
 8001938:	4b6b      	ldr	r3, [pc, #428]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800193e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b68      	ldr	r3, [pc, #416]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a67      	ldr	r2, [pc, #412]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fcc4 	bl	80012e4 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fcc0 	bl	80012e4 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	@ 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e200      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b5d      	ldr	r3, [pc, #372]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0xe4>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fcb0 	bl	80012e4 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fcac 	bl	80012e4 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	@ 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e1ec      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	4b53      	ldr	r3, [pc, #332]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x10c>
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d063      	beq.n	8001a7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019b6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00b      	beq.n	80019da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019c2:	4b49      	ldr	r3, [pc, #292]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d11c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x18c>
 80019ce:	4b46      	ldr	r3, [pc, #280]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d116      	bne.n	8001a08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	4b43      	ldr	r3, [pc, #268]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x176>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e1c0      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4939      	ldr	r1, [pc, #228]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a06:	e03a      	b.n	8001a7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a10:	4b36      	ldr	r3, [pc, #216]	@ (8001aec <HAL_RCC_OscConfig+0x270>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a16:	f7ff fc65 	bl	80012e4 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fc61 	bl	80012e4 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e1a1      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4927      	ldr	r1, [pc, #156]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
 8001a50:	e015      	b.n	8001a7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a52:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <HAL_RCC_OscConfig+0x270>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fc44 	bl	80012e4 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a60:	f7ff fc40 	bl	80012e4 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e180      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d03a      	beq.n	8001b00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d019      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a92:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a98:	f7ff fc24 	bl	80012e4 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fc20 	bl	80012e4 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e160      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f000 fa9c 	bl	8001ffc <RCC_Delay>
 8001ac4:	e01c      	b.n	8001b00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001acc:	f7ff fc0a 	bl	80012e4 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad2:	e00f      	b.n	8001af4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad4:	f7ff fc06 	bl	80012e4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d908      	bls.n	8001af4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e146      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	42420000 	.word	0x42420000
 8001af0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af4:	4b92      	ldr	r3, [pc, #584]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1e9      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80a6 	beq.w	8001c5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b12:	4b8b      	ldr	r3, [pc, #556]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10d      	bne.n	8001b3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	4b88      	ldr	r3, [pc, #544]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a87      	ldr	r2, [pc, #540]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b28:	61d3      	str	r3, [r2, #28]
 8001b2a:	4b85      	ldr	r3, [pc, #532]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b36:	2301      	movs	r3, #1
 8001b38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3a:	4b82      	ldr	r3, [pc, #520]	@ (8001d44 <HAL_RCC_OscConfig+0x4c8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d118      	bne.n	8001b78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b46:	4b7f      	ldr	r3, [pc, #508]	@ (8001d44 <HAL_RCC_OscConfig+0x4c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d44 <HAL_RCC_OscConfig+0x4c8>)
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b52:	f7ff fbc7 	bl	80012e4 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5a:	f7ff fbc3 	bl	80012e4 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b64      	cmp	r3, #100	@ 0x64
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e103      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	4b75      	ldr	r3, [pc, #468]	@ (8001d44 <HAL_RCC_OscConfig+0x4c8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x312>
 8001b80:	4b6f      	ldr	r3, [pc, #444]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4a6e      	ldr	r2, [pc, #440]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6213      	str	r3, [r2, #32]
 8001b8c:	e02d      	b.n	8001bea <HAL_RCC_OscConfig+0x36e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x334>
 8001b96:	4b6a      	ldr	r3, [pc, #424]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a69      	ldr	r2, [pc, #420]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	4b67      	ldr	r3, [pc, #412]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a66      	ldr	r2, [pc, #408]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	6213      	str	r3, [r2, #32]
 8001bae:	e01c      	b.n	8001bea <HAL_RCC_OscConfig+0x36e>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x356>
 8001bb8:	4b61      	ldr	r3, [pc, #388]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a60      	ldr	r2, [pc, #384]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4a5d      	ldr	r2, [pc, #372]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6213      	str	r3, [r2, #32]
 8001bd0:	e00b      	b.n	8001bea <HAL_RCC_OscConfig+0x36e>
 8001bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a5a      	ldr	r2, [pc, #360]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	6213      	str	r3, [r2, #32]
 8001bde:	4b58      	ldr	r3, [pc, #352]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4a57      	ldr	r2, [pc, #348]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d015      	beq.n	8001c1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fb77 	bl	80012e4 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff fb73 	bl	80012e4 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e0b1      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	4b4b      	ldr	r3, [pc, #300]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ee      	beq.n	8001bfa <HAL_RCC_OscConfig+0x37e>
 8001c1c:	e014      	b.n	8001c48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fb61 	bl	80012e4 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff fb5d 	bl	80012e4 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e09b      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3c:	4b40      	ldr	r3, [pc, #256]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1ee      	bne.n	8001c26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d105      	bne.n	8001c5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a3b      	ldr	r2, [pc, #236]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8087 	beq.w	8001d72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c64:	4b36      	ldr	r3, [pc, #216]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d061      	beq.n	8001d34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d146      	bne.n	8001d06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c78:	4b33      	ldr	r3, [pc, #204]	@ (8001d48 <HAL_RCC_OscConfig+0x4cc>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fb31 	bl	80012e4 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff fb2d 	bl	80012e4 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e06d      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c98:	4b29      	ldr	r3, [pc, #164]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cac:	d108      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cae:	4b24      	ldr	r3, [pc, #144]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	4921      	ldr	r1, [pc, #132]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a19      	ldr	r1, [r3, #32]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	491b      	ldr	r1, [pc, #108]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <HAL_RCC_OscConfig+0x4cc>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7ff fb01 	bl	80012e4 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7ff fafd 	bl	80012e4 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e03d      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x46a>
 8001d04:	e035      	b.n	8001d72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_RCC_OscConfig+0x4cc>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff faea 	bl	80012e4 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d14:	f7ff fae6 	bl	80012e4 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e026      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x498>
 8001d32:	e01e      	b.n	8001d72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e019      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40007000 	.word	0x40007000
 8001d48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_RCC_OscConfig+0x500>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000

08001d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0d0      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b6a      	ldr	r3, [pc, #424]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d910      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b67      	ldr	r3, [pc, #412]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 0207 	bic.w	r2, r3, #7
 8001daa:	4965      	ldr	r1, [pc, #404]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b63      	ldr	r3, [pc, #396]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0b8      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d020      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ddc:	4b59      	ldr	r3, [pc, #356]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4a58      	ldr	r2, [pc, #352]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001de6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df4:	4b53      	ldr	r3, [pc, #332]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a52      	ldr	r2, [pc, #328]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001dfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e00:	4b50      	ldr	r3, [pc, #320]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	494d      	ldr	r1, [pc, #308]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d040      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	4b47      	ldr	r3, [pc, #284]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d115      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e07f      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3e:	4b41      	ldr	r3, [pc, #260]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e073      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e06b      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5e:	4b39      	ldr	r3, [pc, #228]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f023 0203 	bic.w	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4936      	ldr	r1, [pc, #216]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e70:	f7ff fa38 	bl	80012e4 <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e78:	f7ff fa34 	bl	80012e4 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e053      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 020c 	and.w	r2, r3, #12
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1eb      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b27      	ldr	r3, [pc, #156]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d210      	bcs.n	8001ed0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b24      	ldr	r3, [pc, #144]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 0207 	bic.w	r2, r3, #7
 8001eb6:	4922      	ldr	r1, [pc, #136]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b20      	ldr	r3, [pc, #128]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e032      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001edc:	4b19      	ldr	r3, [pc, #100]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4916      	ldr	r1, [pc, #88]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001efa:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	490e      	ldr	r1, [pc, #56]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f0e:	f000 f821 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8001f12:	4602      	mov	r2, r0
 8001f14:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	490a      	ldr	r1, [pc, #40]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c8>)
 8001f20:	5ccb      	ldrb	r3, [r1, r3]
 8001f22:	fa22 f303 	lsr.w	r3, r2, r3
 8001f26:	4a09      	ldr	r2, [pc, #36]	@ (8001f4c <HAL_RCC_ClockConfig+0x1cc>)
 8001f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <HAL_RCC_ClockConfig+0x1d0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f996 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40022000 	.word	0x40022000
 8001f44:	40021000 	.word	0x40021000
 8001f48:	08004c68 	.word	0x08004c68
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000004 	.word	0x20000004

08001f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b087      	sub	sp, #28
 8001f58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d002      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x30>
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_GetSysClockFreq+0x36>
 8001f82:	e027      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f84:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <HAL_RCC_GetSysClockFreq+0x98>)
 8001f86:	613b      	str	r3, [r7, #16]
      break;
 8001f88:	e027      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	0c9b      	lsrs	r3, r3, #18
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	4a17      	ldr	r2, [pc, #92]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f94:	5cd3      	ldrb	r3, [r2, r3]
 8001f96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d010      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	0c5b      	lsrs	r3, r3, #17
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	4a11      	ldr	r2, [pc, #68]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001fec <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb6:	fb03 f202 	mul.w	r2, r3, r2
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	e004      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	613b      	str	r3, [r7, #16]
      break;
 8001fd2:	e002      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd4:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd6:	613b      	str	r3, [r7, #16]
      break;
 8001fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fda:	693b      	ldr	r3, [r7, #16]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	007a1200 	.word	0x007a1200
 8001ff0:	08004c78 	.word	0x08004c78
 8001ff4:	08004c88 	.word	0x08004c88
 8001ff8:	003d0900 	.word	0x003d0900

08001ffc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002004:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <RCC_Delay+0x34>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0a      	ldr	r2, [pc, #40]	@ (8002034 <RCC_Delay+0x38>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0a5b      	lsrs	r3, r3, #9
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002018:	bf00      	nop
  }
  while (Delay --);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	60fa      	str	r2, [r7, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f9      	bne.n	8002018 <RCC_Delay+0x1c>
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	20000000 	.word	0x20000000
 8002034:	10624dd3 	.word	0x10624dd3

08002038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e041      	b.n	80020ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d106      	bne.n	8002064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff f80c 	bl	800107c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3304      	adds	r3, #4
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f000 fb76 	bl	8002768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d001      	beq.n	80020f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e03a      	b.n	8002166 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a18      	ldr	r2, [pc, #96]	@ (8002170 <HAL_TIM_Base_Start_IT+0x98>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00e      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x58>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800211a:	d009      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x58>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a14      	ldr	r2, [pc, #80]	@ (8002174 <HAL_TIM_Base_Start_IT+0x9c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x58>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a13      	ldr	r2, [pc, #76]	@ (8002178 <HAL_TIM_Base_Start_IT+0xa0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d111      	bne.n	8002154 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b06      	cmp	r3, #6
 8002140:	d010      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002152:	e007      	b.n	8002164 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40012c00 	.word	0x40012c00
 8002174:	40000400 	.word	0x40000400
 8002178:	40000800 	.word	0x40000800

0800217c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e041      	b.n	8002212 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d106      	bne.n	80021a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f839 	bl	800221a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3304      	adds	r3, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	4610      	mov	r0, r2
 80021bc:	f000 fad4 	bl	8002768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d020      	beq.n	8002290 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d01b      	beq.n	8002290 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0202 	mvn.w	r2, #2
 8002260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fa5a 	bl	8002730 <HAL_TIM_IC_CaptureCallback>
 800227c:	e005      	b.n	800228a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fa4d 	bl	800271e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fa5c 	bl	8002742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	2b00      	cmp	r3, #0
 8002298:	d020      	beq.n	80022dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01b      	beq.n	80022dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0204 	mvn.w	r2, #4
 80022ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2202      	movs	r2, #2
 80022b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fa34 	bl	8002730 <HAL_TIM_IC_CaptureCallback>
 80022c8:	e005      	b.n	80022d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fa27 	bl	800271e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 fa36 	bl	8002742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d020      	beq.n	8002328 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01b      	beq.n	8002328 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0208 	mvn.w	r2, #8
 80022f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2204      	movs	r2, #4
 80022fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fa0e 	bl	8002730 <HAL_TIM_IC_CaptureCallback>
 8002314:	e005      	b.n	8002322 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fa01 	bl	800271e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fa10 	bl	8002742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	d020      	beq.n	8002374 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01b      	beq.n	8002374 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0210 	mvn.w	r2, #16
 8002344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2208      	movs	r2, #8
 800234a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f9e8 	bl	8002730 <HAL_TIM_IC_CaptureCallback>
 8002360:	e005      	b.n	800236e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f9db 	bl	800271e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f9ea 	bl	8002742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00c      	beq.n	8002398 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0201 	mvn.w	r2, #1
 8002390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe fd14 	bl	8000dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00c      	beq.n	80023bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fcc9 	bl	8002d4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f9ba 	bl	8002754 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00c      	beq.n	8002404 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0220 	mvn.w	r2, #32
 80023fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fc9c 	bl	8002d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002426:	2302      	movs	r3, #2
 8002428:	e0ae      	b.n	8002588 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b0c      	cmp	r3, #12
 8002436:	f200 809f 	bhi.w	8002578 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800243a:	a201      	add	r2, pc, #4	@ (adr r2, 8002440 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800243c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002440:	08002475 	.word	0x08002475
 8002444:	08002579 	.word	0x08002579
 8002448:	08002579 	.word	0x08002579
 800244c:	08002579 	.word	0x08002579
 8002450:	080024b5 	.word	0x080024b5
 8002454:	08002579 	.word	0x08002579
 8002458:	08002579 	.word	0x08002579
 800245c:	08002579 	.word	0x08002579
 8002460:	080024f7 	.word	0x080024f7
 8002464:	08002579 	.word	0x08002579
 8002468:	08002579 	.word	0x08002579
 800246c:	08002579 	.word	0x08002579
 8002470:	08002537 	.word	0x08002537
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f9e2 	bl	8002844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0208 	orr.w	r2, r2, #8
 800248e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0204 	bic.w	r2, r2, #4
 800249e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6999      	ldr	r1, [r3, #24]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	619a      	str	r2, [r3, #24]
      break;
 80024b2:	e064      	b.n	800257e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fa28 	bl	8002910 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6999      	ldr	r1, [r3, #24]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	021a      	lsls	r2, r3, #8
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	619a      	str	r2, [r3, #24]
      break;
 80024f4:	e043      	b.n	800257e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fa71 	bl	80029e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0208 	orr.w	r2, r2, #8
 8002510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69da      	ldr	r2, [r3, #28]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0204 	bic.w	r2, r2, #4
 8002520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69d9      	ldr	r1, [r3, #28]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	61da      	str	r2, [r3, #28]
      break;
 8002534:	e023      	b.n	800257e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68b9      	ldr	r1, [r7, #8]
 800253c:	4618      	mov	r0, r3
 800253e:	f000 fabb 	bl	8002ab8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69d9      	ldr	r1, [r3, #28]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	021a      	lsls	r2, r3, #8
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	61da      	str	r2, [r3, #28]
      break;
 8002576:	e002      	b.n	800257e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	75fb      	strb	r3, [r7, #23]
      break;
 800257c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002586:	7dfb      	ldrb	r3, [r7, #23]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_TIM_ConfigClockSource+0x1c>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e0b4      	b.n	8002716 <HAL_TIM_ConfigClockSource+0x186>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80025ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025e4:	d03e      	beq.n	8002664 <HAL_TIM_ConfigClockSource+0xd4>
 80025e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ea:	f200 8087 	bhi.w	80026fc <HAL_TIM_ConfigClockSource+0x16c>
 80025ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025f2:	f000 8086 	beq.w	8002702 <HAL_TIM_ConfigClockSource+0x172>
 80025f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025fa:	d87f      	bhi.n	80026fc <HAL_TIM_ConfigClockSource+0x16c>
 80025fc:	2b70      	cmp	r3, #112	@ 0x70
 80025fe:	d01a      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0xa6>
 8002600:	2b70      	cmp	r3, #112	@ 0x70
 8002602:	d87b      	bhi.n	80026fc <HAL_TIM_ConfigClockSource+0x16c>
 8002604:	2b60      	cmp	r3, #96	@ 0x60
 8002606:	d050      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x11a>
 8002608:	2b60      	cmp	r3, #96	@ 0x60
 800260a:	d877      	bhi.n	80026fc <HAL_TIM_ConfigClockSource+0x16c>
 800260c:	2b50      	cmp	r3, #80	@ 0x50
 800260e:	d03c      	beq.n	800268a <HAL_TIM_ConfigClockSource+0xfa>
 8002610:	2b50      	cmp	r3, #80	@ 0x50
 8002612:	d873      	bhi.n	80026fc <HAL_TIM_ConfigClockSource+0x16c>
 8002614:	2b40      	cmp	r3, #64	@ 0x40
 8002616:	d058      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x13a>
 8002618:	2b40      	cmp	r3, #64	@ 0x40
 800261a:	d86f      	bhi.n	80026fc <HAL_TIM_ConfigClockSource+0x16c>
 800261c:	2b30      	cmp	r3, #48	@ 0x30
 800261e:	d064      	beq.n	80026ea <HAL_TIM_ConfigClockSource+0x15a>
 8002620:	2b30      	cmp	r3, #48	@ 0x30
 8002622:	d86b      	bhi.n	80026fc <HAL_TIM_ConfigClockSource+0x16c>
 8002624:	2b20      	cmp	r3, #32
 8002626:	d060      	beq.n	80026ea <HAL_TIM_ConfigClockSource+0x15a>
 8002628:	2b20      	cmp	r3, #32
 800262a:	d867      	bhi.n	80026fc <HAL_TIM_ConfigClockSource+0x16c>
 800262c:	2b00      	cmp	r3, #0
 800262e:	d05c      	beq.n	80026ea <HAL_TIM_ConfigClockSource+0x15a>
 8002630:	2b10      	cmp	r3, #16
 8002632:	d05a      	beq.n	80026ea <HAL_TIM_ConfigClockSource+0x15a>
 8002634:	e062      	b.n	80026fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002646:	f000 fafc 	bl	8002c42 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002658:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	609a      	str	r2, [r3, #8]
      break;
 8002662:	e04f      	b.n	8002704 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002674:	f000 fae5 	bl	8002c42 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002686:	609a      	str	r2, [r3, #8]
      break;
 8002688:	e03c      	b.n	8002704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002696:	461a      	mov	r2, r3
 8002698:	f000 fa5c 	bl	8002b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2150      	movs	r1, #80	@ 0x50
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fab3 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 80026a8:	e02c      	b.n	8002704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026b6:	461a      	mov	r2, r3
 80026b8:	f000 fa7a 	bl	8002bb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2160      	movs	r1, #96	@ 0x60
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 faa3 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 80026c8:	e01c      	b.n	8002704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026d6:	461a      	mov	r2, r3
 80026d8:	f000 fa3c 	bl	8002b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2140      	movs	r1, #64	@ 0x40
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fa93 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 80026e8:	e00c      	b.n	8002704 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4619      	mov	r1, r3
 80026f4:	4610      	mov	r0, r2
 80026f6:	f000 fa8a 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 80026fa:	e003      	b.n	8002704 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002700:	e000      	b.n	8002704 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002702:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
	...

08002768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a2f      	ldr	r2, [pc, #188]	@ (8002838 <TIM_Base_SetConfig+0xd0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00b      	beq.n	8002798 <TIM_Base_SetConfig+0x30>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002786:	d007      	beq.n	8002798 <TIM_Base_SetConfig+0x30>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a2c      	ldr	r2, [pc, #176]	@ (800283c <TIM_Base_SetConfig+0xd4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d003      	beq.n	8002798 <TIM_Base_SetConfig+0x30>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a2b      	ldr	r2, [pc, #172]	@ (8002840 <TIM_Base_SetConfig+0xd8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d108      	bne.n	80027aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800279e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a22      	ldr	r2, [pc, #136]	@ (8002838 <TIM_Base_SetConfig+0xd0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00b      	beq.n	80027ca <TIM_Base_SetConfig+0x62>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027b8:	d007      	beq.n	80027ca <TIM_Base_SetConfig+0x62>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a1f      	ldr	r2, [pc, #124]	@ (800283c <TIM_Base_SetConfig+0xd4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d003      	beq.n	80027ca <TIM_Base_SetConfig+0x62>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002840 <TIM_Base_SetConfig+0xd8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d108      	bne.n	80027dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a0d      	ldr	r2, [pc, #52]	@ (8002838 <TIM_Base_SetConfig+0xd0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d103      	bne.n	8002810 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f023 0201 	bic.w	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	611a      	str	r2, [r3, #16]
  }
}
 800282e:	bf00      	nop
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	40012c00 	.word	0x40012c00
 800283c:	40000400 	.word	0x40000400
 8002840:	40000800 	.word	0x40000800

08002844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	f023 0201 	bic.w	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f023 0302 	bic.w	r3, r3, #2
 800288c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a1c      	ldr	r2, [pc, #112]	@ (800290c <TIM_OC1_SetConfig+0xc8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d10c      	bne.n	80028ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f023 0308 	bic.w	r3, r3, #8
 80028a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f023 0304 	bic.w	r3, r3, #4
 80028b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a13      	ldr	r2, [pc, #76]	@ (800290c <TIM_OC1_SetConfig+0xc8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d111      	bne.n	80028e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	621a      	str	r2, [r3, #32]
}
 8002900:	bf00      	nop
 8002902:	371c      	adds	r7, #28
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40012c00 	.word	0x40012c00

08002910 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	f023 0210 	bic.w	r2, r3, #16
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800293e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f023 0320 	bic.w	r3, r3, #32
 800295a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a1d      	ldr	r2, [pc, #116]	@ (80029e0 <TIM_OC2_SetConfig+0xd0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d10d      	bne.n	800298c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800298a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a14      	ldr	r2, [pc, #80]	@ (80029e0 <TIM_OC2_SetConfig+0xd0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d113      	bne.n	80029bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800299a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80029a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	621a      	str	r2, [r3, #32]
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr
 80029e0:	40012c00 	.word	0x40012c00

080029e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0303 	bic.w	r3, r3, #3
 8002a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab4 <TIM_OC3_SetConfig+0xd0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10d      	bne.n	8002a5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a14      	ldr	r2, [pc, #80]	@ (8002ab4 <TIM_OC3_SetConfig+0xd0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d113      	bne.n	8002a8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	621a      	str	r2, [r3, #32]
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40012c00 	.word	0x40012c00

08002ab8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	031b      	lsls	r3, r3, #12
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a0f      	ldr	r2, [pc, #60]	@ (8002b50 <TIM_OC4_SetConfig+0x98>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d109      	bne.n	8002b2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	019b      	lsls	r3, r3, #6
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	621a      	str	r2, [r3, #32]
}
 8002b46:	bf00      	nop
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40012c00 	.word	0x40012c00

08002b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	f023 0201 	bic.w	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f023 030a 	bic.w	r3, r3, #10
 8002b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	621a      	str	r2, [r3, #32]
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f023 0210 	bic.w	r2, r3, #16
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	031b      	lsls	r3, r3, #12
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	621a      	str	r2, [r3, #32]
}
 8002c04:	bf00      	nop
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f043 0307 	orr.w	r3, r3, #7
 8002c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	609a      	str	r2, [r3, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b087      	sub	sp, #28
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	021a      	lsls	r2, r3, #8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	609a      	str	r2, [r3, #8]
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e046      	b.n	8002d26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a16      	ldr	r2, [pc, #88]	@ (8002d30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00e      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce4:	d009      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a12      	ldr	r2, [pc, #72]	@ (8002d34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d004      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a10      	ldr	r2, [pc, #64]	@ (8002d38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d10c      	bne.n	8002d14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	40012c00 	.word	0x40012c00
 8002d34:	40000400 	.word	0x40000400
 8002d38:	40000800 	.word	0x40000800

08002d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <memset>:
 8002d60:	4603      	mov	r3, r0
 8002d62:	4402      	add	r2, r0
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d100      	bne.n	8002d6a <memset+0xa>
 8002d68:	4770      	bx	lr
 8002d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6e:	e7f9      	b.n	8002d64 <memset+0x4>

08002d70 <__libc_init_array>:
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	2600      	movs	r6, #0
 8002d74:	4d0c      	ldr	r5, [pc, #48]	@ (8002da8 <__libc_init_array+0x38>)
 8002d76:	4c0d      	ldr	r4, [pc, #52]	@ (8002dac <__libc_init_array+0x3c>)
 8002d78:	1b64      	subs	r4, r4, r5
 8002d7a:	10a4      	asrs	r4, r4, #2
 8002d7c:	42a6      	cmp	r6, r4
 8002d7e:	d109      	bne.n	8002d94 <__libc_init_array+0x24>
 8002d80:	f000 f81a 	bl	8002db8 <_init>
 8002d84:	2600      	movs	r6, #0
 8002d86:	4d0a      	ldr	r5, [pc, #40]	@ (8002db0 <__libc_init_array+0x40>)
 8002d88:	4c0a      	ldr	r4, [pc, #40]	@ (8002db4 <__libc_init_array+0x44>)
 8002d8a:	1b64      	subs	r4, r4, r5
 8002d8c:	10a4      	asrs	r4, r4, #2
 8002d8e:	42a6      	cmp	r6, r4
 8002d90:	d105      	bne.n	8002d9e <__libc_init_array+0x2e>
 8002d92:	bd70      	pop	{r4, r5, r6, pc}
 8002d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d98:	4798      	blx	r3
 8002d9a:	3601      	adds	r6, #1
 8002d9c:	e7ee      	b.n	8002d7c <__libc_init_array+0xc>
 8002d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da2:	4798      	blx	r3
 8002da4:	3601      	adds	r6, #1
 8002da6:	e7f2      	b.n	8002d8e <__libc_init_array+0x1e>
 8002da8:	08004c8c 	.word	0x08004c8c
 8002dac:	08004c8c 	.word	0x08004c8c
 8002db0:	08004c8c 	.word	0x08004c8c
 8002db4:	08004c90 	.word	0x08004c90

08002db8 <_init>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	bf00      	nop
 8002dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dbe:	bc08      	pop	{r3}
 8002dc0:	469e      	mov	lr, r3
 8002dc2:	4770      	bx	lr

08002dc4 <_fini>:
 8002dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc6:	bf00      	nop
 8002dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dca:	bc08      	pop	{r3}
 8002dcc:	469e      	mov	lr, r3
 8002dce:	4770      	bx	lr
